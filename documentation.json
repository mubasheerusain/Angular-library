{
    "pipes": [],
    "interfaces": [],
    "injectables": [
        {
            "name": "ButtonService",
            "id": "injectable-ButtonService-a16325e20b44678e41fe9d787089af35fa3347557a3edb306789bdc19979195b1cca5496c58d3b74690a43145fdc0f6679fb83decbd99649706916864ec788b3",
            "file": "projects/button/src/lib/button.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ButtonService {\n\n  constructor() { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        },
        {
            "name": "ModalService",
            "id": "injectable-ModalService-c177945b228c876de3c8ba9e7c89f00d1db07d4cca7a203f76ba479329369eacc07d1ea0dd375cc1b1b3df579db72af336ee59d0fa4df9ae3b51b86e508d630f",
            "file": "projects/modal/src/lib/modal.service.ts",
            "properties": [
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "openDialog",
                    "args": [
                        {
                            "name": "modalRef",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "modalWidth",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'420px'"
                        },
                        {
                            "name": "modalHeight",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'212px'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "modalRef",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "modalWidth",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'420px'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "modalHeight",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'212px'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, TemplateRef } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ModalService {\r\n\r\n  constructor(public dialog: MatDialog) { }\r\n\r\n  openDialog(modalRef: any, modalWidth = '420px', modalHeight = '212px') {\r\n    const dialogRef = this.dialog.open(modalRef, {\r\n            width: modalWidth,\r\n            height: modalHeight\r\n        });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TabsService",
            "id": "injectable-TabsService-c66f447a23ac0403af9309b7f595605c96e04d00a826e51c516aff8d8ccae243e62ad3d76357e060cab472c992bae5ac1ee9801a2663cc628bda0a8b5914b534",
            "file": "projects/tabs/src/lib/tabs.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TabsService {\n\n  constructor() { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [
        {
            "name": "TooltipDirective",
            "id": "directive-TooltipDirective-743bd3973bf32a786a414745299ebd5bb4733629b8c8ca437989924c722f309d57ef737c4c5c00ce0dbbef2762dfe8f6ba6c8fad24f9c0ef10c3e1848e8fa11b",
            "file": "projects/tooltip/src/lib/tooltip.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Input, ElementRef, TemplateRef, AfterViewInit, Directive, ContentChild, AfterContentInit } from '@angular/core';\r\nimport tippy from 'tippy.js';\r\n\r\n@Directive({\r\n    selector: '[solTooltip]',\r\n    exportAs: 'solTooltip'\r\n})\r\nexport class TooltipDirective implements AfterContentInit {\r\n\r\n    @Input() popoverTemplate: TemplateRef<any> | null = null;\r\n\r\n    @ContentChild('tooltipTemplate') tooltipTmp!: TemplateRef<any>;\r\n\r\n    @Input() content: string | null = null;\r\n\r\n    @Input() trigger: 'mouseenter focus' | 'click' | 'focusin' | 'mouseenter click' = 'mouseenter focus';\r\n\r\n    @Input() position: 'top' | 'top-start' | 'top-end' | 'right' | 'right-start' | 'right-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'left' | 'left-start' | 'left-end' | 'auto' | 'auto-start' | 'auto-end' = 'top';\r\n\r\n    @Input() maxWidth: number = 350;\r\n\r\n    @Input() interactive: boolean = false;\r\n\r\n    @Input() closeOnOutsideClick: boolean = true;\r\n\r\n    @Input() darkMode: boolean = false;\r\n\r\n    @Input() arrow: boolean = false;\r\n\r\n    @Input() ariaDescribedBy: string | null = null;\r\n\r\n    tippyOptions!: Object;\r\n\r\n    instance!: any;\r\n\r\n    open = false;\r\n\r\n    constructor(private el: ElementRef) {\r\n        this.el = el;\r\n    }\r\n\r\n    ngAfterContentInit(): void {\r\n        let test = this.tooltipTmp.createEmbeddedView({$implicit: { name: 'frank' }})\r\n        console.log(test.rootNodes)\r\n        const viewRef = this.popoverTemplate?.createEmbeddedView({});\r\n        var htmlTemplate = '';\r\n        viewRef?.rootNodes.map(ele => {\r\n            if (ele.outerHTML) {\r\n                htmlTemplate += ele.outerHTML.toString()\r\n            }\r\n            else {\r\n                htmlTemplate += ele.textContent\r\n            }\r\n        });\r\n        let popperOptions = { modifiers: [{ name: 'arrow', options: { padding: 15, } }] }\r\n        this.tippyOptions = { \r\n            arrow: this.arrow,\r\n            trigger: this.trigger, \r\n            interactive: this.interactive, \r\n            placement: this.position, \r\n            allowHTML: true, \r\n            maxWidth: this.maxWidth, \r\n            hideOnClick: this.closeOnOutsideClick, \r\n            theme: this.darkMode ? 'dark' : 'light', \r\n            popperOptions: popperOptions, \r\n            onMount: (instance: any) => { \r\n                if(this.ariaDescribedBy) {\r\n                     instance.reference.setAttribute('aria-describedby', this.ariaDescribedBy); \r\n                } \r\n            }, \r\n            onHide: (instance: any) => {\r\n                instance.reference.removeAttribute('aria-describedby'); \r\n            },\r\n            onShow: (instance: any) => {\r\n                if(htmlTemplate) {\r\n                    instance.setContent(htmlTemplate);\r\n                }\r\n                else if(this.content) {\r\n                    instance.setContent(this.content);\r\n                }\r\n            }\r\n        };\r\n        this.instance = tippy(this.el.nativeElement, this.tippyOptions || {});\r\n        this.open = true;\r\n    }\r\n\r\n    show() {\r\n        this.instance.show();\r\n        this.open = true;\r\n    }\r\n\r\n    hide() {\r\n        this.instance.hide();\r\n        this.open = false;\r\n    }\r\n\r\n    toggle() {\r\n        if(this.open) {\r\n            this.hide();\r\n        }\r\n        else {\r\n            this.show();\r\n        }\r\n    }\r\n}",
            "selector": "[solTooltip]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "ariaDescribedBy",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "arrow",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "closeOnOutsideClick",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "content",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "darkMode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "interactive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "maxWidth",
                    "defaultValue": "350",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "popoverTemplate",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "TemplateRef<any> | null",
                    "decorators": []
                },
                {
                    "name": "position",
                    "defaultValue": "'top'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "\"top\" | \"top-start\" | \"top-end\" | \"right\" | \"right-start\" | \"right-end\" | \"bottom\" | \"bottom-start\" | \"bottom-end\" | \"left\" | \"left-start\" | \"left-end\" | \"auto\" | \"auto-start\" | \"auto-end\"",
                    "decorators": []
                },
                {
                    "name": "trigger",
                    "defaultValue": "'mouseenter focus'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "\"mouseenter focus\" | \"click\" | \"focusin\" | \"mouseenter click\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "instance",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "open",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "tippyOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Object",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "tooltipTmp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "'tooltipTemplate'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "AfterContentInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AccordionComponent",
            "id": "component-AccordionComponent-6c6a3a61da9f6d65ce62cec928452e684c44cc6278a3544d7b4f5aacd8dccf6044ac82cd8694d9694761aaa702ae2894e34c32b59729c6beb94168eff5d5f608",
            "file": "projects/accordion/src/lib/accordion.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.ShadowDom"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sol-accordion",
            "styleUrls": [
                "./accordion.component.scss"
            ],
            "styles": [],
            "template": "<mat-accordion [displayMode]=\"'flat'\" [multi]=\"multi\" [attr.id]=\"id\">\n    <mat-expansion-panel hideToggle *ngFor=\"let item of accordionItems$ | async;\" [expanded]=\"item.expanded\" [disabled]=\"item.disabled\" (opened)=\"item.opened()\" (closed)=\"item.closed()\" [attr.id]=\"item.id\">\n        <mat-expansion-panel-header>\n            <svg viewBox=\"0 0 8 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M7.77358 7.00497L1.35849 0.238806C1.0566 -0.079602 0.528302 -0.079602 0.226415 0.238806C-0.0754717 0.557214 -0.0754717 1.11443 0.226415 1.43284L6.26415 7.80099L0.226415 14.5672C-0.0754717 14.8856 -0.0754717 15.4428 0.226415 15.7612C0.528302 16.0796 1.0566 16.0796 1.35849 15.7612L7.77358 8.59702C8 8.35821 8 8.1194 8 7.8806C8 7.48259 7.92453 7.16418 7.77358 7.00497Z\" fill=\"currentColor\"/>\n            </svg>\n            <span>\n                <ng-container *ngIf=\"item.title\">{{item.title}}</ng-container>\n                <ng-container *ngIf=\"item.titleTemplate\" [ngTemplateOutlet]=\"item.titleTemplate\"></ng-container>\n            </span>\n        </mat-expansion-panel-header>\n        <ng-container *ngTemplateOutlet=\"item.accordionContent\">\n        </ng-container>\n    </mat-expansion-panel>\n</mat-accordion>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "id",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "multi",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "accordionItems$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<[] | undefined> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "accordionTabs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<AccordionTabComponent> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "AccordionTabComponent"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterContentInit, ChangeDetectionStrategy, Component, ContentChildren, Input, QueryList, ViewEncapsulation } from \"@angular/core\";\r\nimport { delay, map, Observable, startWith } from \"rxjs\";\r\nimport { AccordionTabComponent } from \"./accordionTab.component\";\r\n\r\n@Component({\r\n    selector: 'sol-accordion',\r\n    template: `\r\n    <mat-accordion [displayMode]=\"'flat'\" [multi]=\"multi\" [attr.id]=\"id\">\r\n        <mat-expansion-panel hideToggle *ngFor=\"let item of accordionItems$ | async;\" [expanded]=\"item.expanded\" [disabled]=\"item.disabled\" (opened)=\"item.opened()\" (closed)=\"item.closed()\" [attr.id]=\"item.id\">\r\n            <mat-expansion-panel-header>\r\n                <svg viewBox=\"0 0 8 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path d=\"M7.77358 7.00497L1.35849 0.238806C1.0566 -0.079602 0.528302 -0.079602 0.226415 0.238806C-0.0754717 0.557214 -0.0754717 1.11443 0.226415 1.43284L6.26415 7.80099L0.226415 14.5672C-0.0754717 14.8856 -0.0754717 15.4428 0.226415 15.7612C0.528302 16.0796 1.0566 16.0796 1.35849 15.7612L7.77358 8.59702C8 8.35821 8 8.1194 8 7.8806C8 7.48259 7.92453 7.16418 7.77358 7.00497Z\" fill=\"currentColor\"/>\r\n                </svg>\r\n                <span>\r\n                    <ng-container *ngIf=\"item.title\">{{item.title}}</ng-container>\r\n                    <ng-container *ngIf=\"item.titleTemplate\" [ngTemplateOutlet]=\"item.titleTemplate\"></ng-container>\r\n                </span>\r\n            </mat-expansion-panel-header>\r\n            <ng-container *ngTemplateOutlet=\"item.accordionContent\">\r\n            </ng-container>\r\n        </mat-expansion-panel>\r\n    </mat-accordion>\r\n    `,\r\n    styleUrls: ['./accordion.component.scss'],\r\n    encapsulation: ViewEncapsulation.ShadowDom,\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AccordionComponent implements AfterContentInit {\r\n\r\n    @Input() multi = false;\r\n\r\n    @Input() id: string | null = null;\r\n\r\n    @ContentChildren(AccordionTabComponent) accordionTabs: QueryList<AccordionTabComponent> | undefined;\r\n\r\n    accordionItems$: Observable<AccordionTabComponent[] | undefined> | undefined;\r\n\r\n    ngAfterContentInit(): void {\r\n        this.accordionItems$ = this.accordionTabs?.changes\r\n            .pipe(startWith(\"\"))\r\n            .pipe(delay(0))\r\n            .pipe(map(() => {\r\n                return this.accordionTabs?.toArray()\r\n            }));\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-expansion-panel,\r\n.mat-expansion-panel:not([class*=mat-elevation-z]) {\r\n    overflow: visible;\r\n\r\n    .mat-expansion-panel-header {\r\n        padding: 15px 16px 9px 0;\r\n        border-top: 1px solid #767676;\r\n        border-radius: 0;\r\n        font-family: 'Open Sans';\r\n        font-style: normal;\r\n        font-weight: 700;\r\n        font-size: 14px;\r\n        line-height: 130%;\r\n        color: #191919;\r\n\r\n        span {\r\n            display: flex;\r\n            align-items: center;\r\n            gap: 12px;\r\n\r\n            svg {\r\n                color: #767676;\r\n                width: 20px;\r\n                height: 20px;\r\n                transition: all 0.2s ease-out;\r\n            }\r\n\r\n            span {\r\n                gap: 8px;\r\n\r\n                svg {\r\n                    width: 16px;\r\n                    height: 16px;\r\n                }\r\n            }\r\n        }\r\n\r\n        &[aria-disabled=true] {\r\n            border-color: #C3C5C9;\r\n            color: #8E9CAB;\r\n\r\n            span {\r\n                svg {\r\n                    color: #8E9CAB;\r\n                }\r\n            }\r\n        }\r\n\r\n        &:focus-visible {\r\n            outline: 1px solid #5804FF;\r\n            outline-offset: 4px;\r\n        }\r\n    }\r\n\r\n    .mat-expansion-panel-content {\r\n        overflow: hidden;\r\n        max-height: 0;\r\n        transition: all 0.3s ease-out;\r\n        .mat-expansion-panel-body {\r\n            padding: 0 16px;\r\n            font-family: 'Open Sans';\r\n            font-style: normal;\r\n            font-weight: 400;\r\n            font-size: 13px;\r\n            line-height: 120%;\r\n            color: #191919;\r\n        }\r\n    }\r\n\r\n    .mat-expanded {\r\n        span {\r\n            svg {\r\n                transform: rotate(90deg);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n.mat-expansion-panel .mat-expanded ~ .mat-expansion-panel-content {\r\n    max-height: 100%;\r\n}",
                    "styleUrl": "./accordion.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "AfterContentInit"
            ]
        },
        {
            "name": "AccordionTabComponent",
            "id": "component-AccordionTabComponent-489f8821b51314f975a2ad640bcbfe9e62c833b77178b2b1a468da6c6a24d7474eac08df503f6578476258fc115f7ac7f5c22698db642c93cb29113de649df74",
            "file": "projects/accordion/src/lib/accordionTab.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.Emulated"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sol-accordion-tab",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-template><ng-content></ng-content></ng-template>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "expanded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hideToggle",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "titleTemplate",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "TemplateRef<any> | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "sectionClosed",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter"
                },
                {
                    "name": "sectionOpened",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "accordionContent",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any> | null",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "TemplateRef"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closed",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "opened",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, TemplateRef, ViewChild, ViewEncapsulation } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: 'sol-accordion-tab',\r\n    template: `<ng-template><ng-content></ng-content></ng-template>`,\r\n    encapsulation: ViewEncapsulation.Emulated,\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AccordionTabComponent {\r\n\r\n    @Input() title: string = '';\r\n\r\n    @Input() id: string | null = null;\r\n\r\n    @Input() expanded = false;\r\n\r\n    @Input() hideToggle = false;\r\n\r\n    @Input() disabled = false;\r\n\r\n    @Input() titleTemplate: TemplateRef<any> | null = null;\r\n\r\n    @Output() sectionOpened = new EventEmitter();\r\n\r\n    @Output() sectionClosed = new EventEmitter(); \r\n\r\n    @ViewChild(TemplateRef) accordionContent: TemplateRef<any> | null = null;\r\n\r\n    opened () {\r\n        this.expanded = true;\r\n        this.sectionOpened.emit();\r\n    }\r\n\r\n    closed () {\r\n        this.expanded = false;\r\n        this.sectionClosed.emit();\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "AlertModal",
            "id": "component-AlertModal-0e8b7d2fa986b238de9bd21ad5bebeb059dc279ee64d346c08edea532beca5033063ecc09e42f979a3cbc270e0aa977a8a7c57109fecd3317c448266506ae8a9",
            "file": "projects/modal/src/lib/modal.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "    <sol-modal [headerTitle]=\"'Error'\" [type]=\"'alert'\" bodyMessage=\"Error messages goes here.\nSecond line for more information.\"></sol-modal>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from \"@angular/core\";\r\nimport { MatButtonModule } from \"@angular/material/button\";\r\nimport { MatDialogModule } from \"@angular/material/dialog\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { Meta, moduleMetadata, Story } from \"@storybook/angular\";\r\nimport { ButtonModule } from \"button\";\r\nimport { ModalModule } from \"./modal.module\";\r\nimport { ModalService } from \"./modal.service\";\r\n\r\n\r\n@Component({\r\n    template: `\r\n    <sol-modal [headerTitle]=\"'Error'\" [type]=\"'alert'\" bodyMessage=\"Error messages goes here.\r\nSecond line for more information.\"></sol-modal>\r\n    `\r\n  })\r\n class AlertModal {}\r\n\r\n @Component({\r\n    template: `\r\n    <sol-modal [headerTitle]=\"'Warning'\" [type]=\"'warning'\" bodyMessage=\"Warning messages goes here.\r\nSecond line for more information.\"></sol-modal>\r\n    `\r\n  })\r\n class WarningModal {} \r\n\r\n @Component({\r\n    template: `\r\n    <sol-modal [headerTitle]=\"'Information'\" [type]=\"'information'\" bodyMessage=\"Information messages goes here.\r\nSecond line for more information.\"></sol-modal>\r\n    `\r\n  })\r\n class InformationModal {} \r\n\r\n @Component({\r\n    template: `\r\n    <sol-modal>\r\n        <sol-custom-header>Standard Popover (Modal)</sol-custom-header>\r\n        <sol-custom-body>Custom body has been added here.</sol-custom-body>\r\n        <sol-custom-footer>\r\n            <lib-button [variant]=\"'basic'\" [size]=\"'large'\">Cancel</lib-button>\r\n            <lib-button [variant]=\"'primary'\" [size]=\"'large'\" mat-dialog-close>Confirm</lib-button>\r\n        </sol-custom-footer>\r\n    </sol-modal>\r\n    `\r\n  })\r\n class CustomModal {} \r\n\r\n@Component({\r\n    selector: 'launch-dialog',\r\n    template: ' <button mat-raised-button color=\"primary\" (click)=\"openDialog()\">Open Modal</button> '\r\n  })\r\n  class LaunchDialogComponent {\r\n    @Input() modalType: 'warning' | 'alert' | 'information' | null = null;\r\n\r\n    constructor(private dialog: ModalService) {}\r\n    openDialog(): void {\r\n      if(this.modalType === 'alert') {\r\n        this.dialog.openDialog(AlertModal);\r\n      }\r\n      else if(this.modalType === 'warning') {\r\n        this.dialog.openDialog(WarningModal);\r\n      }\r\n      else if(this.modalType === 'information') {\r\n        this.dialog.openDialog(InformationModal);\r\n      }\r\n      else {\r\n        this.dialog.openDialog(CustomModal, undefined, '190px');\r\n      }\r\n    }\r\n  }\r\n  \r\n  export default {\r\n    title: 'Modal',\r\n    component: LaunchDialogComponent,\r\n    decorators: [\r\n      moduleMetadata({\r\n        declarations: [LaunchDialogComponent, AlertModal, InformationModal, WarningModal, CustomModal],\r\n        imports: [MatDialogModule, ModalModule, BrowserAnimationsModule, MatButtonModule, ButtonModule]\r\n      })\r\n    ],\r\n    argTypes: {\r\n        modalType: {\r\n          options: ['warning', 'alert', 'information']\r\n        },\r\n     },\r\n  } as Meta;\r\n  \r\n  const Template: Story<LaunchDialogComponent> = (args: LaunchDialogComponent) => ({\r\n    props: args,\r\n    template: `<launch-dialog [modalType]=\"modalType\"></launch-dialog>`\r\n  });\r\n  \r\n  export const Standard = Template.bind({});\r\n  Standard.args = { };\r\n\r\n  export const Warning = Template.bind({});\r\n  Warning.args = {\r\n    modalType: 'warning'\r\n  };\r\n\r\n  export const Alert = Template.bind({});\r\n  Alert.args = {\r\n    modalType: 'alert'\r\n  };\r\n\r\n  export const Information = Template.bind({});\r\n  Information.args = {\r\n    modalType: 'information'\r\n  };\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-04ede409efd28c813c6f5faa8792361a0abc019979b4cdb9e63dda2b2c726c4c648d2c7987898c519e188ab709739a91c3cb4abf9d15c0ba91bb080620084786",
            "file": "projects/button/src/lib/button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.Default",
            "encapsulation": [
                "ViewEncapsulation.ShadowDom"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "aria-label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "IconPositionedEnd",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "TemplateRef<any> | null",
                    "decorators": []
                },
                {
                    "name": "IconPositionedFront",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "TemplateRef<any> | null",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "\"large\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "\"large\" | \"medium\" | \"small\"",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "\"primary\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "\"primary\" | \"basic\" | \"text\" | \"warn\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "buttonText",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef | null",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'buttonText', {static: true}"
                        }
                    ]
                },
                {
                    "name": "Variant",
                    "defaultValue": "Variant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "OnClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, OnInit, Output, TemplateRef, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { Variant } from './enum//variant.enum';\n\n@Component({\n  selector: 'lib-button',\n  templateUrl: './button.component.html', \n  styleUrls: ['./button.component.scss'],\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.ShadowDom\n})\nexport class ButtonComponent implements OnInit {\n\n  @ViewChild('buttonText', { static: true }) buttonText: ElementRef | null = null;\n\n  @Input()\n  variant: \"primary\" | \"basic\" | \"text\" | \"warn\" = \"primary\";\n\n  @Input()\n  id?: string = \"\";\n\n  @Input()\n  type?: string = \"\";\n\n  @Input()\n  name?: string = \"\";\n\n  @Input()\n  value: any;\n\n  @Input() IconPositionedFront: TemplateRef<any> | null = null;\n\n  @Input('aria-label') ariaLabel?: string;\n\n  @Input()\n  disabled: boolean = false;\n\n  @Input() IconPositionedEnd: TemplateRef<any> | null = null;\n\n  @Output() onClick = new EventEmitter();\n\n  public Variant = Variant;\n\n  @Input()\n  size: \"large\" | \"medium\" | \"small\" = \"large\"\n\n  constructor() { }\n\n  get buttonClass() {\n    return Variant[this.variant] + '-'+  this.size\n  }\n\n  ngOnInit(): void {\n    if(!this.ariaLabel){\n      this.ariaLabel = this.buttonText?.nativeElement?.textContent\n    }\n  }\n\n  OnClick() {\n    this.onClick.emit();\n  }\n\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import './scss/variables';\r\n\r\n@mixin btn($bg-color, $color, $variant, $size) {\r\n    display: flex;\r\n    align-items: center;\r\n    min-width: map-get($min-width, $size);\r\n    border-radius: $base-border-radius;\r\n    font-family: $base-font-family;\r\n    font-weight: $base-font-weight;\r\n    font-size: map-get($font-size, $size);\r\n    line-height: map-get($line-height, $size);\r\n    text-align: center;\r\n    cursor: pointer;\r\n    padding: map-get($padding, $size);\r\n    background: $bg-color;\r\n    color: $color;\r\n    height: map-get($height, $size);\r\n    @if($variant==\"basic\") {\r\n        border: map-get($border-color, \"basic\");\r\n    }\r\n    @else {\r\n        border: none;\r\n    }\r\n};\r\n@each $key_var, $val_var in $variant {\r\n    @if($key_var != \"disabled\") {\r\n        @each $key_size in $size {\r\n            .btn-#{$key_var}-#{$key_size} {\r\n                @include btn($val_var, map-get($text, $key_var), $key_var, $key_size);\r\n                &:hover {\r\n                    background: map-get($variant_hover, $key_var);\r\n                }\r\n                &:active {\r\n                    background: map-get($variant_active, $key_var);\r\n                    transform: scale(0.95);\r\n                }\r\n                &:focus {\r\n                    outline: $base-outline;\r\n                    outline-offset: 4px;\r\n                }\r\n                &:disabled {\r\n                    background: map-get($variant, \"disabled\");\r\n                    border: map-get($border-color, \"disabled\");\r\n                    color: map-get($text, \"disabled\");\r\n                    transform: none;\r\n                    cursor: default;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 44
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "buttonClass": {
                    "name": "buttonClass",
                    "getSignature": {
                        "name": "buttonClass",
                        "type": "",
                        "returnType": "",
                        "line": 48
                    }
                }
            },
            "templateData": "<button [class]=\"buttonClass\" [attr.id]=\"id ? id : null\" [disabled]=\"disabled\" (click)=\"OnClick()\" [attr.aria-label]=\"ariaLabel ? ariaLabel : null\" [attr.aria-disabled]=\"disabled ? disabled : null\" [attr.type]=\"type ? type : null\" [attr.name]=\"name ? name : null\" [attr.value]=\"value ? value : null\">\r\n    <ng-template  *ngIf=\"IconPositionedFront\" [ngTemplateOutlet]=\"IconPositionedFront\"></ng-template>\r\n    <ng-content></ng-content>\r\n    <ng-template  *ngIf=\"IconPositionedEnd\" [ngTemplateOutlet]=\"IconPositionedEnd\"></ng-template>\r\n</button>"
        },
        {
            "name": "CustomBodyComponent",
            "id": "component-CustomBodyComponent-51a526c70a9cc0deabf4d4a69efc67be7f9dd39454f50658210bb94f0429dad06c6b045c431d5f15c207f0191e693b201101d135ffc6780b740cd2d3ffd5f22b",
            "file": "projects/modal/src/lib/customBody.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.ShadowDom"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sol-custom-body",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-template><ng-content></ng-content></ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bodyContent",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any> | null",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "TemplateRef"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, TemplateRef, ViewChild, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'sol-custom-body',\r\n    template: `\r\n        <ng-template><ng-content></ng-content></ng-template>\r\n    `,\r\n    encapsulation: ViewEncapsulation.ShadowDom,\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CustomBodyComponent {\r\n\r\n  @ViewChild(TemplateRef) bodyContent: TemplateRef<any> | null = null;\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CustomFooterComponent",
            "id": "component-CustomFooterComponent-4c00407e42c03f9534106d967a333ce7c44e1adba83b5d5a20ba79904f99d1f89d38ad3131c61f440c60edd1bf233aa5cb9026a721530257f1e2d049c5639677",
            "file": "projects/modal/src/lib/customFooter.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.ShadowDom"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sol-custom-footer",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-template><ng-content></ng-content></ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "footerContent",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any> | null",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "TemplateRef"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, TemplateRef, ViewChild, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'sol-custom-footer',\r\n    template: `\r\n        <ng-template><ng-content></ng-content></ng-template>\r\n    `,\r\n    encapsulation: ViewEncapsulation.ShadowDom,\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CustomFooterComponent {\r\n\r\n  @ViewChild(TemplateRef) footerContent: TemplateRef<any> | null = null;\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CustomHeaderComponent",
            "id": "component-CustomHeaderComponent-bba44c805fd6a0154988861124e03639d2f38a4856c5c27185748dc2f07a8478c26b9fd1758ed46f42d30945835270c14df45e1021be44718d681ea952084a14",
            "file": "projects/modal/src/lib/customHeader.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.ShadowDom"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sol-custom-header",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-template><ng-content></ng-content></ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "headerContent",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any> | null",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "TemplateRef"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, TemplateRef, ViewChild, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'sol-custom-header',\r\n    template: `\r\n        <ng-template><ng-content></ng-content></ng-template>\r\n    `,\r\n    encapsulation: ViewEncapsulation.ShadowDom,\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CustomHeaderComponent {\r\n\r\n  @ViewChild(TemplateRef) headerContent: TemplateRef<any> | null = null;\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CustomModal",
            "id": "component-CustomModal-0e8b7d2fa986b238de9bd21ad5bebeb059dc279ee64d346c08edea532beca5033063ecc09e42f979a3cbc270e0aa977a8a7c57109fecd3317c448266506ae8a9",
            "file": "projects/modal/src/lib/modal.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "<sol-modal>\n    <sol-custom-header>Standard Popover (Modal)</sol-custom-header>\n    <sol-custom-body>Custom body has been added here.</sol-custom-body>\n    <sol-custom-footer>\n        <lib-button [variant]=\"'basic'\" [size]=\"'large'\">Cancel</lib-button>\n        <lib-button [variant]=\"'primary'\" [size]=\"'large'\" mat-dialog-close>Confirm</lib-button>\n    </sol-custom-footer>\n</sol-modal>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from \"@angular/core\";\r\nimport { MatButtonModule } from \"@angular/material/button\";\r\nimport { MatDialogModule } from \"@angular/material/dialog\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { Meta, moduleMetadata, Story } from \"@storybook/angular\";\r\nimport { ButtonModule } from \"button\";\r\nimport { ModalModule } from \"./modal.module\";\r\nimport { ModalService } from \"./modal.service\";\r\n\r\n\r\n@Component({\r\n    template: `\r\n    <sol-modal [headerTitle]=\"'Error'\" [type]=\"'alert'\" bodyMessage=\"Error messages goes here.\r\nSecond line for more information.\"></sol-modal>\r\n    `\r\n  })\r\n class AlertModal {}\r\n\r\n @Component({\r\n    template: `\r\n    <sol-modal [headerTitle]=\"'Warning'\" [type]=\"'warning'\" bodyMessage=\"Warning messages goes here.\r\nSecond line for more information.\"></sol-modal>\r\n    `\r\n  })\r\n class WarningModal {} \r\n\r\n @Component({\r\n    template: `\r\n    <sol-modal [headerTitle]=\"'Information'\" [type]=\"'information'\" bodyMessage=\"Information messages goes here.\r\nSecond line for more information.\"></sol-modal>\r\n    `\r\n  })\r\n class InformationModal {} \r\n\r\n @Component({\r\n    template: `\r\n    <sol-modal>\r\n        <sol-custom-header>Standard Popover (Modal)</sol-custom-header>\r\n        <sol-custom-body>Custom body has been added here.</sol-custom-body>\r\n        <sol-custom-footer>\r\n            <lib-button [variant]=\"'basic'\" [size]=\"'large'\">Cancel</lib-button>\r\n            <lib-button [variant]=\"'primary'\" [size]=\"'large'\" mat-dialog-close>Confirm</lib-button>\r\n        </sol-custom-footer>\r\n    </sol-modal>\r\n    `\r\n  })\r\n class CustomModal {} \r\n\r\n@Component({\r\n    selector: 'launch-dialog',\r\n    template: ' <button mat-raised-button color=\"primary\" (click)=\"openDialog()\">Open Modal</button> '\r\n  })\r\n  class LaunchDialogComponent {\r\n    @Input() modalType: 'warning' | 'alert' | 'information' | null = null;\r\n\r\n    constructor(private dialog: ModalService) {}\r\n    openDialog(): void {\r\n      if(this.modalType === 'alert') {\r\n        this.dialog.openDialog(AlertModal);\r\n      }\r\n      else if(this.modalType === 'warning') {\r\n        this.dialog.openDialog(WarningModal);\r\n      }\r\n      else if(this.modalType === 'information') {\r\n        this.dialog.openDialog(InformationModal);\r\n      }\r\n      else {\r\n        this.dialog.openDialog(CustomModal, undefined, '190px');\r\n      }\r\n    }\r\n  }\r\n  \r\n  export default {\r\n    title: 'Modal',\r\n    component: LaunchDialogComponent,\r\n    decorators: [\r\n      moduleMetadata({\r\n        declarations: [LaunchDialogComponent, AlertModal, InformationModal, WarningModal, CustomModal],\r\n        imports: [MatDialogModule, ModalModule, BrowserAnimationsModule, MatButtonModule, ButtonModule]\r\n      })\r\n    ],\r\n    argTypes: {\r\n        modalType: {\r\n          options: ['warning', 'alert', 'information']\r\n        },\r\n     },\r\n  } as Meta;\r\n  \r\n  const Template: Story<LaunchDialogComponent> = (args: LaunchDialogComponent) => ({\r\n    props: args,\r\n    template: `<launch-dialog [modalType]=\"modalType\"></launch-dialog>`\r\n  });\r\n  \r\n  export const Standard = Template.bind({});\r\n  Standard.args = { };\r\n\r\n  export const Warning = Template.bind({});\r\n  Warning.args = {\r\n    modalType: 'warning'\r\n  };\r\n\r\n  export const Alert = Template.bind({});\r\n  Alert.args = {\r\n    modalType: 'alert'\r\n  };\r\n\r\n  export const Information = Template.bind({});\r\n  Information.args = {\r\n    modalType: 'information'\r\n  };\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "InformationModal",
            "id": "component-InformationModal-0e8b7d2fa986b238de9bd21ad5bebeb059dc279ee64d346c08edea532beca5033063ecc09e42f979a3cbc270e0aa977a8a7c57109fecd3317c448266506ae8a9",
            "file": "projects/modal/src/lib/modal.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "    <sol-modal [headerTitle]=\"'Information'\" [type]=\"'information'\" bodyMessage=\"Information messages goes here.\nSecond line for more information.\"></sol-modal>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from \"@angular/core\";\r\nimport { MatButtonModule } from \"@angular/material/button\";\r\nimport { MatDialogModule } from \"@angular/material/dialog\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { Meta, moduleMetadata, Story } from \"@storybook/angular\";\r\nimport { ButtonModule } from \"button\";\r\nimport { ModalModule } from \"./modal.module\";\r\nimport { ModalService } from \"./modal.service\";\r\n\r\n\r\n@Component({\r\n    template: `\r\n    <sol-modal [headerTitle]=\"'Error'\" [type]=\"'alert'\" bodyMessage=\"Error messages goes here.\r\nSecond line for more information.\"></sol-modal>\r\n    `\r\n  })\r\n class AlertModal {}\r\n\r\n @Component({\r\n    template: `\r\n    <sol-modal [headerTitle]=\"'Warning'\" [type]=\"'warning'\" bodyMessage=\"Warning messages goes here.\r\nSecond line for more information.\"></sol-modal>\r\n    `\r\n  })\r\n class WarningModal {} \r\n\r\n @Component({\r\n    template: `\r\n    <sol-modal [headerTitle]=\"'Information'\" [type]=\"'information'\" bodyMessage=\"Information messages goes here.\r\nSecond line for more information.\"></sol-modal>\r\n    `\r\n  })\r\n class InformationModal {} \r\n\r\n @Component({\r\n    template: `\r\n    <sol-modal>\r\n        <sol-custom-header>Standard Popover (Modal)</sol-custom-header>\r\n        <sol-custom-body>Custom body has been added here.</sol-custom-body>\r\n        <sol-custom-footer>\r\n            <lib-button [variant]=\"'basic'\" [size]=\"'large'\">Cancel</lib-button>\r\n            <lib-button [variant]=\"'primary'\" [size]=\"'large'\" mat-dialog-close>Confirm</lib-button>\r\n        </sol-custom-footer>\r\n    </sol-modal>\r\n    `\r\n  })\r\n class CustomModal {} \r\n\r\n@Component({\r\n    selector: 'launch-dialog',\r\n    template: ' <button mat-raised-button color=\"primary\" (click)=\"openDialog()\">Open Modal</button> '\r\n  })\r\n  class LaunchDialogComponent {\r\n    @Input() modalType: 'warning' | 'alert' | 'information' | null = null;\r\n\r\n    constructor(private dialog: ModalService) {}\r\n    openDialog(): void {\r\n      if(this.modalType === 'alert') {\r\n        this.dialog.openDialog(AlertModal);\r\n      }\r\n      else if(this.modalType === 'warning') {\r\n        this.dialog.openDialog(WarningModal);\r\n      }\r\n      else if(this.modalType === 'information') {\r\n        this.dialog.openDialog(InformationModal);\r\n      }\r\n      else {\r\n        this.dialog.openDialog(CustomModal, undefined, '190px');\r\n      }\r\n    }\r\n  }\r\n  \r\n  export default {\r\n    title: 'Modal',\r\n    component: LaunchDialogComponent,\r\n    decorators: [\r\n      moduleMetadata({\r\n        declarations: [LaunchDialogComponent, AlertModal, InformationModal, WarningModal, CustomModal],\r\n        imports: [MatDialogModule, ModalModule, BrowserAnimationsModule, MatButtonModule, ButtonModule]\r\n      })\r\n    ],\r\n    argTypes: {\r\n        modalType: {\r\n          options: ['warning', 'alert', 'information']\r\n        },\r\n     },\r\n  } as Meta;\r\n  \r\n  const Template: Story<LaunchDialogComponent> = (args: LaunchDialogComponent) => ({\r\n    props: args,\r\n    template: `<launch-dialog [modalType]=\"modalType\"></launch-dialog>`\r\n  });\r\n  \r\n  export const Standard = Template.bind({});\r\n  Standard.args = { };\r\n\r\n  export const Warning = Template.bind({});\r\n  Warning.args = {\r\n    modalType: 'warning'\r\n  };\r\n\r\n  export const Alert = Template.bind({});\r\n  Alert.args = {\r\n    modalType: 'alert'\r\n  };\r\n\r\n  export const Information = Template.bind({});\r\n  Information.args = {\r\n    modalType: 'information'\r\n  };\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "LaunchDialogComponent",
            "id": "component-LaunchDialogComponent-0e8b7d2fa986b238de9bd21ad5bebeb059dc279ee64d346c08edea532beca5033063ecc09e42f979a3cbc270e0aa977a8a7c57109fecd3317c448266506ae8a9",
            "file": "projects/modal/src/lib/modal.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "launch-dialog",
            "styleUrls": [],
            "styles": [],
            "template": "<button mat-raised-button color=\"primary\" (click)=\"openDialog()\">Open Modal</button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "modalType",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "\"warning\" | \"alert\" | \"information\" | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "openDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from \"@angular/core\";\r\nimport { MatButtonModule } from \"@angular/material/button\";\r\nimport { MatDialogModule } from \"@angular/material/dialog\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { Meta, moduleMetadata, Story } from \"@storybook/angular\";\r\nimport { ButtonModule } from \"button\";\r\nimport { ModalModule } from \"./modal.module\";\r\nimport { ModalService } from \"./modal.service\";\r\n\r\n\r\n@Component({\r\n    template: `\r\n    <sol-modal [headerTitle]=\"'Error'\" [type]=\"'alert'\" bodyMessage=\"Error messages goes here.\r\nSecond line for more information.\"></sol-modal>\r\n    `\r\n  })\r\n class AlertModal {}\r\n\r\n @Component({\r\n    template: `\r\n    <sol-modal [headerTitle]=\"'Warning'\" [type]=\"'warning'\" bodyMessage=\"Warning messages goes here.\r\nSecond line for more information.\"></sol-modal>\r\n    `\r\n  })\r\n class WarningModal {} \r\n\r\n @Component({\r\n    template: `\r\n    <sol-modal [headerTitle]=\"'Information'\" [type]=\"'information'\" bodyMessage=\"Information messages goes here.\r\nSecond line for more information.\"></sol-modal>\r\n    `\r\n  })\r\n class InformationModal {} \r\n\r\n @Component({\r\n    template: `\r\n    <sol-modal>\r\n        <sol-custom-header>Standard Popover (Modal)</sol-custom-header>\r\n        <sol-custom-body>Custom body has been added here.</sol-custom-body>\r\n        <sol-custom-footer>\r\n            <lib-button [variant]=\"'basic'\" [size]=\"'large'\">Cancel</lib-button>\r\n            <lib-button [variant]=\"'primary'\" [size]=\"'large'\" mat-dialog-close>Confirm</lib-button>\r\n        </sol-custom-footer>\r\n    </sol-modal>\r\n    `\r\n  })\r\n class CustomModal {} \r\n\r\n@Component({\r\n    selector: 'launch-dialog',\r\n    template: ' <button mat-raised-button color=\"primary\" (click)=\"openDialog()\">Open Modal</button> '\r\n  })\r\n  class LaunchDialogComponent {\r\n    @Input() modalType: 'warning' | 'alert' | 'information' | null = null;\r\n\r\n    constructor(private dialog: ModalService) {}\r\n    openDialog(): void {\r\n      if(this.modalType === 'alert') {\r\n        this.dialog.openDialog(AlertModal);\r\n      }\r\n      else if(this.modalType === 'warning') {\r\n        this.dialog.openDialog(WarningModal);\r\n      }\r\n      else if(this.modalType === 'information') {\r\n        this.dialog.openDialog(InformationModal);\r\n      }\r\n      else {\r\n        this.dialog.openDialog(CustomModal, undefined, '190px');\r\n      }\r\n    }\r\n  }\r\n  \r\n  export default {\r\n    title: 'Modal',\r\n    component: LaunchDialogComponent,\r\n    decorators: [\r\n      moduleMetadata({\r\n        declarations: [LaunchDialogComponent, AlertModal, InformationModal, WarningModal, CustomModal],\r\n        imports: [MatDialogModule, ModalModule, BrowserAnimationsModule, MatButtonModule, ButtonModule]\r\n      })\r\n    ],\r\n    argTypes: {\r\n        modalType: {\r\n          options: ['warning', 'alert', 'information']\r\n        },\r\n     },\r\n  } as Meta;\r\n  \r\n  const Template: Story<LaunchDialogComponent> = (args: LaunchDialogComponent) => ({\r\n    props: args,\r\n    template: `<launch-dialog [modalType]=\"modalType\"></launch-dialog>`\r\n  });\r\n  \r\n  export const Standard = Template.bind({});\r\n  Standard.args = { };\r\n\r\n  export const Warning = Template.bind({});\r\n  Warning.args = {\r\n    modalType: 'warning'\r\n  };\r\n\r\n  export const Alert = Template.bind({});\r\n  Alert.args = {\r\n    modalType: 'alert'\r\n  };\r\n\r\n  export const Information = Template.bind({});\r\n  Information.args = {\r\n    modalType: 'information'\r\n  };\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 54,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ModalComponent",
            "id": "component-ModalComponent-445cce6ba4742f8b3128eb8ca4b3c6b64b3c56683a9e7ed933942c56799d33f1870ad58bc22a6e67077f6656d9d2c4b03c3de3381a4a22bb65fc23d59e98af6f",
            "file": "projects/modal/src/lib/modal.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sol-modal",
            "styleUrls": [
                "./modal.component.scss"
            ],
            "styles": [],
            "template": "<ng-template let-type=\"type\"  #icon>\n    <svg *ngIf=\"type === 'warning'\" width=\"20\" height=\"19\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M19.7956 17.0157L11.8074 2.09424C11.408 1.39791 10.7091 1 10.0101 1C9.31116 1 8.61219 1.39791 8.21279 2.09424L0.224666 17.0157C-0.0748887 17.6126 -0.0748887 18.4084 0.224666 19.0052C0.624072 19.6021 1.22318 20 1.92214 20H17.8984C18.5973 20 19.2963 19.6021 19.5959 19.0052C20.0951 18.3089 20.0951 17.6126 19.7956 17.0157ZM10.0101 16.9162C9.41101 16.9162 9.0116 16.5183 9.0116 15.9215C9.0116 15.3246 9.41101 14.9267 10.0101 14.9267C10.5094 14.9267 11.0086 15.3246 11.0086 15.9215C11.0086 16.5183 10.5094 16.9162 10.0101 16.9162ZM11.0086 11.9424C11.0086 12.5393 10.5094 12.9372 10.0101 12.9372C9.41101 12.9372 9.0116 12.5393 9.0116 11.9424V7.96335C9.0116 7.36649 9.41101 6.96859 10.0101 6.96859C10.5094 6.96859 11.0086 7.36649 11.0086 7.96335V11.9424Z\" fill=\"#EFA716\"/>\n    </svg>\n    <svg *ngIf=\"type === 'alert'\" width=\"20\" height=\"19\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M10 0C4.5 0 0 4.5 0 10C0 15.5 4.5 20 10 20C15.5 20 20 15.5 20 10C20 4.5 15.5 0 10 0ZM11 14.5C11 15.1 10.6 15.5 10 15.5C9.4 15.5 9 15.1 9 14.5V13.5C9 12.9 9.4 12.5 10 12.5C10.6 12.5 11 12.9 11 13.5V14.5ZM11 9.5C11 10.1 10.6 10.5 10 10.5C9.4 10.5 9 10.1 9 9.5V5.5C9 4.9 9.4 4.5 10 4.5C10.6 4.5 11 4.9 11 5.5V9.5Z\" fill=\"#CE313F\"/>\n    </svg>\n    <svg *ngIf=\"type === 'information'\" width=\"20\" height=\"19\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M10 0C4.5 0 0 4.5 0 10C0 15.5 4.5 20 10 20C15.5 20 20 15.5 20 10C20 4.5 15.5 0 10 0ZM11 14.5C11 15 10.5 15.5 10 15.5C9.4 15.5 9 15 9 14.5V10.5C9 10 9.4 9.5 10 9.5C10.5 9.5 11 10 11 10.5V14.5ZM11 6.5C11 7 10.5 7.5 10 7.5C9.4 7.5 9 7 9 6.5V5.5C9 5 9.4 4.5 10 4.5C10.5 4.5 11 5 11 5.5V6.5Z\" fill=\"#5261FF\"/>\n    </svg>\n</ng-template>\n<ng-template let-type=\"type\"  #footer>\n    <ng-container *ngIf=\"type==='warning'\">\n        <al-button [variant]=\"'warn'\" [size]=\"'large'\">Don't Save</al-button>\n        <al-button [variant]=\"'basic'\" [size]=\"'large'\" mat-dialog-close>Cancel</al-button>\n    </ng-container>\n    <ng-container *ngIf=\"type==='information' || type==='alert'\">\n        <al-button [variant]=\"'basic'\" [size]=\"'large'\" mat-dialog-close>Ok</al-button>\n    </ng-container>\n</ng-template>\n<div mat-dialog-title>\n    <div class=\"modalHeader\">\n        <ng-container *ngIf=\"!customHeader\" [ngTemplateOutlet]=\"icon\" [ngTemplateOutletContext] =\"{'type': type}\"></ng-container>\n        <span *ngIf=\"headerTitle && !customHeader\">{{ headerTitle }}</span>\n        <ng-container *ngIf=\"customHeader\" [ngTemplateOutlet]=\"customHeader.headerContent\">\n      </ng-container>\n    </div>\n    <div class=\"closeIcon\">\n        <button mat-dialog-close>\n            <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M11.3125 10.0465L15.7188 5.67442C16.0938 5.30233 16.0938 4.74419 15.7188 4.37209C15.3438 4 14.7812 4 14.4062 4.37209L10 8.74419L5.59375 4.27907C5.21875 3.90698 4.65625 3.90698 4.28125 4.27907C3.90625 4.65116 3.90625 5.2093 4.28125 5.5814L8.6875 10.0465L4.28125 14.4186C3.90625 14.7907 3.90625 15.3488 4.28125 15.7209C4.65625 16.093 5.21875 16.093 5.59375 15.7209L10 11.3488L14.4062 15.7209C14.7812 16.093 15.3438 16.093 15.7188 15.7209C16.0938 15.3488 16.0938 14.7907 15.7188 14.4186L11.3125 10.0465Z\" fill=\"#333333\"/>\n            </svg>\n        </button>\n    </div>\n</div>\n<div mat-dialog-content>\n    <span *ngIf=\"bodyMessage && !customBody\">{{ bodyMessage }}</span>\n    <ng-container *ngIf=\"customBody\" [ngTemplateOutlet]=\"customBody.bodyContent\"></ng-container>\n</div>\n<div mat-dialog-actions [align]=\"'end'\">\n    <ng-container *ngIf=\"!customFooter\" [ngTemplateOutlet]=\"footer\" [ngTemplateOutletContext] =\"{'type': type}\"></ng-container>\n    <ng-container *ngIf=\"customFooter\" [ngTemplateOutlet]=\"customFooter.footerContent\"></ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bodyMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "headerTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "\"warning\" | \"alert\" | \"information\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "alertIconRef",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any> | null",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'alertIcon'"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "customBody",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CustomBodyComponent",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "CustomBodyComponent"
                        }
                    ]
                },
                {
                    "name": "customFooter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CustomFooterComponent",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "CustomFooterComponent"
                        }
                    ]
                },
                {
                    "name": "customHeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CustomHeaderComponent",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "CustomHeaderComponent"
                        }
                    ]
                },
                {
                    "name": "informationIconRef",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any> | null",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'informationIcon'"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "warningIconRef",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any> | null",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'warningIcon'"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, Input, TemplateRef, ViewChild, ViewEncapsulation } from '@angular/core';\r\nimport { CustomBodyComponent } from './customBody.component';\r\nimport { CustomFooterComponent } from './customFooter.component';\r\nimport { CustomHeaderComponent } from './customHeader.component';\r\n\r\n\r\n@Component({\r\n    selector: 'sol-modal',\r\n    template: `\r\n    <ng-template let-type=\"type\"  #icon>\r\n        <svg *ngIf=\"type === 'warning'\" width=\"20\" height=\"19\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M19.7956 17.0157L11.8074 2.09424C11.408 1.39791 10.7091 1 10.0101 1C9.31116 1 8.61219 1.39791 8.21279 2.09424L0.224666 17.0157C-0.0748887 17.6126 -0.0748887 18.4084 0.224666 19.0052C0.624072 19.6021 1.22318 20 1.92214 20H17.8984C18.5973 20 19.2963 19.6021 19.5959 19.0052C20.0951 18.3089 20.0951 17.6126 19.7956 17.0157ZM10.0101 16.9162C9.41101 16.9162 9.0116 16.5183 9.0116 15.9215C9.0116 15.3246 9.41101 14.9267 10.0101 14.9267C10.5094 14.9267 11.0086 15.3246 11.0086 15.9215C11.0086 16.5183 10.5094 16.9162 10.0101 16.9162ZM11.0086 11.9424C11.0086 12.5393 10.5094 12.9372 10.0101 12.9372C9.41101 12.9372 9.0116 12.5393 9.0116 11.9424V7.96335C9.0116 7.36649 9.41101 6.96859 10.0101 6.96859C10.5094 6.96859 11.0086 7.36649 11.0086 7.96335V11.9424Z\" fill=\"#EFA716\"/>\r\n        </svg>\r\n        <svg *ngIf=\"type === 'alert'\" width=\"20\" height=\"19\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M10 0C4.5 0 0 4.5 0 10C0 15.5 4.5 20 10 20C15.5 20 20 15.5 20 10C20 4.5 15.5 0 10 0ZM11 14.5C11 15.1 10.6 15.5 10 15.5C9.4 15.5 9 15.1 9 14.5V13.5C9 12.9 9.4 12.5 10 12.5C10.6 12.5 11 12.9 11 13.5V14.5ZM11 9.5C11 10.1 10.6 10.5 10 10.5C9.4 10.5 9 10.1 9 9.5V5.5C9 4.9 9.4 4.5 10 4.5C10.6 4.5 11 4.9 11 5.5V9.5Z\" fill=\"#CE313F\"/>\r\n        </svg>\r\n        <svg *ngIf=\"type === 'information'\" width=\"20\" height=\"19\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M10 0C4.5 0 0 4.5 0 10C0 15.5 4.5 20 10 20C15.5 20 20 15.5 20 10C20 4.5 15.5 0 10 0ZM11 14.5C11 15 10.5 15.5 10 15.5C9.4 15.5 9 15 9 14.5V10.5C9 10 9.4 9.5 10 9.5C10.5 9.5 11 10 11 10.5V14.5ZM11 6.5C11 7 10.5 7.5 10 7.5C9.4 7.5 9 7 9 6.5V5.5C9 5 9.4 4.5 10 4.5C10.5 4.5 11 5 11 5.5V6.5Z\" fill=\"#5261FF\"/>\r\n        </svg>\r\n    </ng-template>\r\n    <ng-template let-type=\"type\"  #footer>\r\n        <ng-container *ngIf=\"type==='warning'\">\r\n            <al-button [variant]=\"'warn'\" [size]=\"'large'\">Don't Save</al-button>\r\n            <al-button [variant]=\"'basic'\" [size]=\"'large'\" mat-dialog-close>Cancel</al-button>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"type==='information' || type==='alert'\">\r\n            <al-button [variant]=\"'basic'\" [size]=\"'large'\" mat-dialog-close>Ok</al-button>\r\n        </ng-container>\r\n    </ng-template>\r\n    <div mat-dialog-title>\r\n        <div class=\"modalHeader\">\r\n            <ng-container *ngIf=\"!customHeader\" [ngTemplateOutlet]=\"icon\" [ngTemplateOutletContext] =\"{'type': type}\"></ng-container>  \r\n            <span *ngIf=\"headerTitle && !customHeader\">{{ headerTitle }}</span>\r\n            <ng-container *ngIf=\"customHeader\" [ngTemplateOutlet]=\"customHeader.headerContent\">\r\n          </ng-container>\r\n        </div>\r\n        <div class=\"closeIcon\">\r\n            <button mat-dialog-close>\r\n                <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path d=\"M11.3125 10.0465L15.7188 5.67442C16.0938 5.30233 16.0938 4.74419 15.7188 4.37209C15.3438 4 14.7812 4 14.4062 4.37209L10 8.74419L5.59375 4.27907C5.21875 3.90698 4.65625 3.90698 4.28125 4.27907C3.90625 4.65116 3.90625 5.2093 4.28125 5.5814L8.6875 10.0465L4.28125 14.4186C3.90625 14.7907 3.90625 15.3488 4.28125 15.7209C4.65625 16.093 5.21875 16.093 5.59375 15.7209L10 11.3488L14.4062 15.7209C14.7812 16.093 15.3438 16.093 15.7188 15.7209C16.0938 15.3488 16.0938 14.7907 15.7188 14.4186L11.3125 10.0465Z\" fill=\"#333333\"/>\r\n                </svg>\r\n            </button>\r\n        </div>\r\n    </div>\r\n    <div mat-dialog-content>\r\n        <span *ngIf=\"bodyMessage && !customBody\">{{ bodyMessage }}</span>\r\n        <ng-container *ngIf=\"customBody\" [ngTemplateOutlet]=\"customBody.bodyContent\"></ng-container>\r\n    </div>\r\n    <div mat-dialog-actions [align]=\"'end'\">\r\n        <ng-container *ngIf=\"!customFooter\" [ngTemplateOutlet]=\"footer\" [ngTemplateOutletContext] =\"{'type': type}\"></ng-container>\r\n        <ng-container *ngIf=\"customFooter\" [ngTemplateOutlet]=\"customFooter.footerContent\"></ng-container>\r\n    </div>\r\n  `,\r\n    styleUrls: ['./modal.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ModalComponent implements AfterViewInit {\r\n    @Input() headerTitle!: string;\r\n\r\n    @Input() type!: 'warning' | 'alert' | 'information';\r\n\r\n    @Input() bodyMessage!: string;\r\n\r\n    @ViewChild('warningIcon') public warningIconRef: TemplateRef<any> | null = null;\r\n\r\n    @ViewChild('alertIcon') public alertIconRef: TemplateRef<any> | null = null;\r\n\r\n    @ViewChild('informationIcon') public informationIconRef: TemplateRef<any> | null = null;\r\n\r\n    @ContentChild(CustomHeaderComponent) customHeader!: CustomHeaderComponent;\r\n\r\n    @ContentChild(CustomBodyComponent) customBody!: CustomBodyComponent;\r\n\r\n    @ContentChild(CustomFooterComponent) customFooter!: CustomFooterComponent;\r\n\r\n    constructor(private cdr: ChangeDetectorRef) {}\r\n\r\n    ngAfterViewInit() {\r\n        this.cdr.detectChanges();\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-dialog-container {\r\n    padding: 0;\r\n    border-radius: 8px;\r\n    box-shadow: 0px 8px 12px 1px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.cdk-overlay-dark-backdrop {\r\n    background: rgba(0, 0, 0, 0.48);\r\n}\r\n\r\n.mat-dialog-title {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    padding: 20px 0px 20px 20px;\r\n    margin: 0;\r\n    .modalHeader {\r\n        display: flex;\r\n        align-items: center;\r\n        gap: 8px;\r\n        font-size: 20px;\r\n        font-weight: 600;\r\n    }\r\n\r\n    .closeIcon {\r\n        button {\r\n            border: none;\r\n            background: none;\r\n            outline: none;\r\n            cursor: pointer;\r\n            padding: 12px;\r\n        }\r\n    }\r\n}\r\n\r\n.mat-dialog-content {\r\n    font-family: 'Open Sans';\r\n    font-style: normal;\r\n    font-weight: 400;\r\n    font-size: 13px;\r\n    line-height: 120%;\r\n    color: #333333;\r\n    margin: 0;\r\n\r\n    span {\r\n        display: block;\r\n        padding-right: 24px;\r\n        padding-left: 52px;\r\n    }\r\n}\r\n\r\n.mat-dialog-actions {\r\n    gap: 8px;\r\n    padding: 24px;\r\n    min-height: 0;\r\n}",
                    "styleUrl": "./modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 75,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit"
            ]
        },
        {
            "name": "TabComponent",
            "id": "component-TabComponent-63fd126672f7140f036f504c2021e15d7c6e2532a27434e8c93240b3b5ee59fb703f6a4c4727fb06f61fcb48601772925bbcee03200ea1dab08a10612cfeefa9",
            "file": "projects/tabs/src/lib/tab.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sol-tab",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-template><ng-content></ng-content></ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "titleTemplate",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "TemplateRef<any> | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "itemContent",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any> | null",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "TemplateRef"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, TemplateRef, ViewChild } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'sol-tab',\r\n    template: `\r\n        <ng-template><ng-content></ng-content></ng-template>\r\n    `\r\n})\r\nexport class TabComponent {\r\n  @Input()\r\n  isActive: boolean = false;\r\n\r\n  @Input()\r\n  title: string = '';\r\n\r\n  @Input()\r\n  titleTemplate: TemplateRef<any> | null = null;\r\n\r\n  @ViewChild(TemplateRef)\r\n  itemContent: TemplateRef<any> | null = null;\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "TabsComponent",
            "id": "component-TabsComponent-9c8a26a1cab1970568321e66a24314aef63c6a23c57f0b9843e1f733d4bfa75ed8be7824f8f871e30fbb2702b9fa9b3c1f72672c5796bd06362c0d12e0f529c3",
            "file": "projects/tabs/src/lib/tabs.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sol-tabs",
            "styleUrls": [
                "./tabs.component.scss"
            ],
            "styles": [],
            "template": "<div [class]=\"'tabs-' + variant + '-' + size\">\n  <mat-tab-group disableRipple=\"true\">\n    <mat-tab *ngFor=\"let item of tabItems$ | async;\" [class]=\"'tabs-header-' + variant + '-' + size\">\n      <ng-template mat-tab-label>\n        <ng-container *ngIf=\"item.title\">{{item.title}}</ng-container>\n        <ng-container *ngTemplateOutlet=\"item.titleTemplate\"></ng-container>\n      </ng-template>\n      <ng-container *ngTemplateOutlet=\"item.itemContent\">\n      </ng-container>\n    </mat-tab>\n  </mat-tab-group>\n<div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "size",
                    "defaultValue": "'large'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "\"large\" | \"extraLarge\"",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'basic'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "\"primary\" | \"basic\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeTabIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "tabGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTabGroup",
                    "optional": true,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatTabGroup"
                        }
                    ]
                },
                {
                    "name": "tabItems$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<[] | undefined> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "tabs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<TabComponent> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "TabComponent"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterContentInit, Component, ContentChildren, Input, QueryList, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { MatTabGroup } from '@angular/material/tabs';\nimport { delay, map, Observable, startWith } from 'rxjs';\nimport { TabComponent } from './tab.component';\n\n\n@Component({\n  selector: 'sol-tabs',\n  template: `\n    <div [class]=\"'tabs-' + variant + '-' + size\">\n      <mat-tab-group disableRipple=\"true\">\n        <mat-tab *ngFor=\"let item of tabItems$ | async;\" [class]=\"'tabs-header-' + variant + '-' + size\">\n          <ng-template mat-tab-label>\n            <ng-container *ngIf=\"item.title\">{{item.title}}</ng-container>\n            <ng-container *ngTemplateOutlet=\"item.titleTemplate\"></ng-container>\n          </ng-template>\n          <ng-container *ngTemplateOutlet=\"item.itemContent\">\n          </ng-container>\n        </mat-tab>\n      </mat-tab-group>\n    <div>\n  `,\n  styleUrls: ['./tabs.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class TabsComponent implements AfterContentInit {\n\n  @ViewChild(MatTabGroup) tabGroup?: MatTabGroup;\n\n  @ContentChildren(TabComponent) tabs: QueryList<TabComponent> | undefined;\n\n  @Input() variant: 'primary' | 'basic' = 'basic';\n\n  @Input() size: 'large' | 'extraLarge' = 'large';\n\n  tabItems$: Observable<TabComponent[] | undefined> | undefined;\n\n  activeTabIndex: number = 0;\n\n  ngAfterContentInit(): void {\n    this.tabItems$ = this.tabs?.changes\n      .pipe(startWith(\"\"))\n      .pipe(delay(0))\n      .pipe(map(() => {\n        if (this.tabGroup) {\n          this.tabGroup.selectedIndex = this.tabs?.toArray().findIndex((tab) => tab.isActive == true)\n        }\n        return this.tabs?.toArray()\n      }));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use './variables' as *;\r\n@use \"sass:map\";\r\n\r\n@each $key_var, $val_var in $variant {\r\n    @each $key_size in $size {\r\n        .tabs-#{$key_var}-#{$key_size} {\r\n            mat-tab-group {\r\n                &.mat-tab-group.mat-primary {\r\n                    .mat-tab-header {\r\n                        overflow: visible;\r\n                        background: $val_var;\r\n                        padding: 0 16px;\r\n                        .mat-tab-list {\r\n                            overflow: visible;\r\n                            .mat-tab-labels {\r\n                                .mat-tab-label {\r\n                                    padding: map.get($padding-label, $key_size);\r\n                                    color: $base-text-color;\r\n                                    font-family: 'Open Sans';\r\n                                    font-style: normal;\r\n                                    font-weight: 600;\r\n                                    font-size: 13px;\r\n                                    line-height: 18px;\r\n                                    border-bottom: 2px solid transparent;\r\n                                    opacity: 1;\r\n                                    min-width: unset;\r\n                                    .mat-tab-label-content {\r\n                                        display: inline-flex;\r\n                                        gap: 8px;\r\n                                    }\r\n                                    &:hover {\r\n                                        background: $base-background-hover;\r\n                                        border-bottom: 2px solid $base-border-bottom-focus;\r\n                                    }\r\n                                    &:focus {\r\n                                        outline: 1px solid #5804FF;\r\n                                        outline-offset: 4px;\r\n                                        z-index: 9999;\r\n                                    }\r\n                                    &:focus:enabled {\r\n                                        background: $base-background-focus;\r\n                                        border-bottom: 2px solid $base-border-bottom-focus;\r\n                                    }\r\n                                }\r\n                                .mat-tab-label-active {\r\n                                    padding: map.get($padding-label, $key_size);\r\n                                    color: $base-text-color-enabled;\r\n                                    border-bottom: 2px solid $base-border-bottom-active;\r\n                                    min-width: unset;\r\n                                    &:hover {\r\n                                        background: $base-background-hover;\r\n                                        border-bottom: 2px solid $base-border-bottom-active;\r\n\r\n                                    }\r\n                                    &:focus:enabled {\r\n                                        background: $base-background-focus;\r\n                                        border-bottom: 2px solid $base-border-bottom-active;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        .mat-tab-label-container {\r\n                            overflow: visible;\r\n                        }\r\n                        .mat-ink-bar {\r\n                            background: none;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./tabs.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "AfterContentInit"
            ]
        },
        {
            "name": "ToolTipWrapper",
            "id": "component-ToolTipWrapper-00c745b02b9f297388d3b2b6fcfd583e0e580e08729e11747ef7a7dd8888666365d2ac66eac1892e94f04d615d458d68dcb761cdb1e7294f69e2eb88f6f7b169",
            "file": "projects/tooltip/src/lib/tooltipBinding.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sol-tooltipWrapper",
            "styleUrls": [],
            "styles": [],
            "template": "<div style=\"width:100%;height:300px;display:flex; justify-content:center;align-items:center;gap:25px;\">\n        <div>\n            <lib-button [variant]=\"'primary'\" [size]=\"'large'\" #tooltip=\"solTooltip\" solTooltip [trigger]=\"trigger\" [position]=\"'bottom'\" [ariaDescribedBy]=\"'Forms tooltip'\" [interactive]=\"interactive\" [darkMode]=\"darkMode\" [closeOnOutsideClick]=\"false\" [arrow]=\"arrow\">\n                <ng-template #tooltipTemplate let-data>\n                    <p>{{data.name}}</p>\n                </ng-template>\n                test\n            </lib-button>\n        </div>\n        <button (click)=\"tooltip.show()\">show</button>\n        <button (click)=\"tooltip.hide()\">hide</button>\n        <button (click)=\"tooltip.toggle()\">toggle</button>\n        User Name: {{ userName }}\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "arrow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "darkMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "interactive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "trigger",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "userName",
                    "defaultValue": "\"jbond\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from \"@angular/core\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { Meta, moduleMetadata, Story } from \"@storybook/angular\";\r\nimport { ButtonModule } from \"button\";\r\nimport { TooltipModule } from \"./tooltip.module\";\r\n\r\n\r\n@Component({\r\n    selector: 'sol-tooltipWrapper',\r\n    template: `\r\n    <div style=\"width:100%;height:300px;display:flex; justify-content:center;align-items:center;gap:25px;\">\r\n            <div>\r\n                <lib-button [variant]=\"'primary'\" [size]=\"'large'\" #tooltip=\"solTooltip\" solTooltip [trigger]=\"trigger\" [position]=\"'bottom'\" [ariaDescribedBy]=\"'Forms tooltip'\" [interactive]=\"interactive\" [darkMode]=\"darkMode\" [closeOnOutsideClick]=\"false\" [arrow]=\"arrow\">\r\n                    <ng-template #tooltipTemplate let-data>\r\n                        <p>{{data.name}}</p>\r\n                    </ng-template>\r\n                    test\r\n                </lib-button>\r\n            </div>\r\n            <button (click)=\"tooltip.show()\">show</button>\r\n            <button (click)=\"tooltip.hide()\">hide</button>\r\n            <button (click)=\"tooltip.toggle()\">toggle</button>\r\n            User Name: {{ userName }}\r\n    </div>\r\n    `\r\n})\r\nclass ToolTipWrapper {\r\n    @Input() arrow!: boolean;\r\n    @Input() darkMode!: boolean;\r\n    @Input() trigger!: string;\r\n    @Input() interactive!: boolean;\r\n    userName: string = \"jbond\";\r\n}\r\n\r\nexport default {\r\n    title: 'Tooltip',\r\n    decorators: [\r\n        moduleMetadata({\r\n            declarations: [ToolTipWrapper],\r\n            imports: [TooltipModule, ButtonModule, FormsModule, ReactiveFormsModule],\r\n        }),\r\n    ]\r\n} as Meta;\r\n\r\nconst ToolTipStory: Story = (args: any) => ({\r\n    props: args,\r\n    template: `\r\n        <sol-tooltipWrapper [arrow]=\"arrow\" [darkMode]=\"darkMode\" [trigger]=\"trigger\" [interactive]=\"interactive\"></sol-tooltipWrapper>\r\n    `,\r\n});\r\n\r\nexport const tooltipWithBinding = ToolTipStory.bind({});\r\ntooltipWithBinding.args = {\r\n    arrow: true,\r\n    darkMode: true,\r\n    trigger: 'click',\r\n    interactive: true\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "WarningModal",
            "id": "component-WarningModal-0e8b7d2fa986b238de9bd21ad5bebeb059dc279ee64d346c08edea532beca5033063ecc09e42f979a3cbc270e0aa977a8a7c57109fecd3317c448266506ae8a9",
            "file": "projects/modal/src/lib/modal.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "    <sol-modal [headerTitle]=\"'Warning'\" [type]=\"'warning'\" bodyMessage=\"Warning messages goes here.\nSecond line for more information.\"></sol-modal>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from \"@angular/core\";\r\nimport { MatButtonModule } from \"@angular/material/button\";\r\nimport { MatDialogModule } from \"@angular/material/dialog\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { Meta, moduleMetadata, Story } from \"@storybook/angular\";\r\nimport { ButtonModule } from \"button\";\r\nimport { ModalModule } from \"./modal.module\";\r\nimport { ModalService } from \"./modal.service\";\r\n\r\n\r\n@Component({\r\n    template: `\r\n    <sol-modal [headerTitle]=\"'Error'\" [type]=\"'alert'\" bodyMessage=\"Error messages goes here.\r\nSecond line for more information.\"></sol-modal>\r\n    `\r\n  })\r\n class AlertModal {}\r\n\r\n @Component({\r\n    template: `\r\n    <sol-modal [headerTitle]=\"'Warning'\" [type]=\"'warning'\" bodyMessage=\"Warning messages goes here.\r\nSecond line for more information.\"></sol-modal>\r\n    `\r\n  })\r\n class WarningModal {} \r\n\r\n @Component({\r\n    template: `\r\n    <sol-modal [headerTitle]=\"'Information'\" [type]=\"'information'\" bodyMessage=\"Information messages goes here.\r\nSecond line for more information.\"></sol-modal>\r\n    `\r\n  })\r\n class InformationModal {} \r\n\r\n @Component({\r\n    template: `\r\n    <sol-modal>\r\n        <sol-custom-header>Standard Popover (Modal)</sol-custom-header>\r\n        <sol-custom-body>Custom body has been added here.</sol-custom-body>\r\n        <sol-custom-footer>\r\n            <lib-button [variant]=\"'basic'\" [size]=\"'large'\">Cancel</lib-button>\r\n            <lib-button [variant]=\"'primary'\" [size]=\"'large'\" mat-dialog-close>Confirm</lib-button>\r\n        </sol-custom-footer>\r\n    </sol-modal>\r\n    `\r\n  })\r\n class CustomModal {} \r\n\r\n@Component({\r\n    selector: 'launch-dialog',\r\n    template: ' <button mat-raised-button color=\"primary\" (click)=\"openDialog()\">Open Modal</button> '\r\n  })\r\n  class LaunchDialogComponent {\r\n    @Input() modalType: 'warning' | 'alert' | 'information' | null = null;\r\n\r\n    constructor(private dialog: ModalService) {}\r\n    openDialog(): void {\r\n      if(this.modalType === 'alert') {\r\n        this.dialog.openDialog(AlertModal);\r\n      }\r\n      else if(this.modalType === 'warning') {\r\n        this.dialog.openDialog(WarningModal);\r\n      }\r\n      else if(this.modalType === 'information') {\r\n        this.dialog.openDialog(InformationModal);\r\n      }\r\n      else {\r\n        this.dialog.openDialog(CustomModal, undefined, '190px');\r\n      }\r\n    }\r\n  }\r\n  \r\n  export default {\r\n    title: 'Modal',\r\n    component: LaunchDialogComponent,\r\n    decorators: [\r\n      moduleMetadata({\r\n        declarations: [LaunchDialogComponent, AlertModal, InformationModal, WarningModal, CustomModal],\r\n        imports: [MatDialogModule, ModalModule, BrowserAnimationsModule, MatButtonModule, ButtonModule]\r\n      })\r\n    ],\r\n    argTypes: {\r\n        modalType: {\r\n          options: ['warning', 'alert', 'information']\r\n        },\r\n     },\r\n  } as Meta;\r\n  \r\n  const Template: Story<LaunchDialogComponent> = (args: LaunchDialogComponent) => ({\r\n    props: args,\r\n    template: `<launch-dialog [modalType]=\"modalType\"></launch-dialog>`\r\n  });\r\n  \r\n  export const Standard = Template.bind({});\r\n  Standard.args = { };\r\n\r\n  export const Warning = Template.bind({});\r\n  Warning.args = {\r\n    modalType: 'warning'\r\n  };\r\n\r\n  export const Alert = Template.bind({});\r\n  Alert.args = {\r\n    modalType: 'alert'\r\n  };\r\n\r\n  export const Information = Template.bind({});\r\n  Information.args = {\r\n    modalType: 'information'\r\n  };\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        }
    ],
    "modules": [
        {
            "name": "ButtonModule",
            "id": "module-ButtonModule-e52654106a4f031121378a14850fc7e81ee4ca0234be67ec3281270f338cdacb4f93e0579c846eafd59f6565048bc245fe42066c277efae0ce45b00e5859bf4b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/button/src/lib/button.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ButtonComponent } from './button.component';\n\n\n\n@NgModule({\n  declarations: [\n    ButtonComponent\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    ButtonComponent\n  ]\n})\nexport class ButtonModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ModalModule",
            "id": "module-ModalModule-548ae1314ec6bb82fc8aa0a1b2783ef1dcc3b9b4cdfe8dc21b7117ef9b6c2d54d3ad4d2ed4dec3263c5a16808f126b7ac0bcd4cc25acbd677138f368c0afd690",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/accordion/src/lib/accordion.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { AccordionComponent } from \"./accordion.component\";\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { AccordionTabComponent } from \"./accordionTab.component\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\n\r\n@NgModule({\r\n    declarations: [AccordionComponent, AccordionTabComponent],\r\n    imports: [CommonModule, MatExpansionModule, BrowserAnimationsModule],\r\n    exports: [AccordionComponent, AccordionTabComponent]\r\n  })\r\n  export class ModalModule {}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionTabComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AccordionComponent"
                        },
                        {
                            "name": "AccordionTabComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ModalModule",
            "id": "module-ModalModule-7661e15d643fcbe5c8f2ef7bc321cc68cdaaa7a7bba9126af08e4b93a2e6ebbd3723e9f827674e5c441b5c65f5f7f0dc0e8861fb0f579ba69c3dfc9a2317cc09-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/modal/src/lib/modal.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport {MatDialogModule} from '@angular/material/dialog';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport { ModalComponent } from './modal.component';\r\nimport { CustomHeaderComponent } from './customHeader.component';\r\nimport { CustomBodyComponent } from './customBody.component';\r\nimport { CustomFooterComponent } from './customFooter.component';\r\nimport { ButtonModule } from 'button';\r\n\r\n@NgModule({\r\n  declarations: [ModalComponent, CustomHeaderComponent, CustomBodyComponent, CustomFooterComponent],\r\n  imports: [CommonModule, MatDialogModule, MatButtonModule, ButtonModule],\r\n  exports: [ModalComponent, CustomHeaderComponent, CustomBodyComponent, CustomFooterComponent]\r\n})\r\nexport class ModalModule {}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CustomBodyComponent"
                        },
                        {
                            "name": "CustomFooterComponent"
                        },
                        {
                            "name": "CustomHeaderComponent"
                        },
                        {
                            "name": "ModalComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CustomBodyComponent"
                        },
                        {
                            "name": "CustomFooterComponent"
                        },
                        {
                            "name": "CustomHeaderComponent"
                        },
                        {
                            "name": "ModalComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TabsModule",
            "id": "module-TabsModule-81197219367372dc27a124cff406ce6b6472e23e9ca9c9fc330b590963b0d1e562bed5e2222748bffdd6791b1046abd8705ddfcd9ae54f23e7507d32dba2d276",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/tabs/src/lib/tabs.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { TabsComponent } from './tabs.component';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { CommonModule } from '@angular/common';\nimport { TabComponent } from './tab.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { BrowserModule } from '@angular/platform-browser'; \nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [\n    TabsComponent,\n    TabComponent\n  ],\n  imports: [\n    MatTabsModule,\n    BrowserAnimationsModule\n  ],\n  exports: [\n    TabsComponent\n  ]\n})\nexport class TabsModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TabComponent"
                        },
                        {
                            "name": "TabsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TabsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TooltipModule",
            "id": "module-TooltipModule-fa766c097ec093aca15fbf1e275fe74279f1e27630654d97284b785841f34927e452583a1f9737fb559e371f5af9c21d9d451506aeaeec963b5faaca3b43b3e2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/tooltip/src/lib/tooltip.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from \"@angular/common\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { TooltipDirective } from \"./tooltip.directive\";\r\n\r\n@NgModule({\r\n    declarations: [TooltipDirective],\r\n    imports: [CommonModule],\r\n    exports: [TooltipDirective]\r\n  })\r\n  export class TooltipModule {}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TooltipDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TooltipDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "AccordionStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/accordion/src/lib/accordion.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<AccordionComponent>",
                "defaultValue": "(args: AccordionComponent) => ({\r\n    props: args,\r\n    template: `\r\n    <ng-template #titleTemplate>\r\n        <svg viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M12.8 16H3.2C1.44 16 0 14.56 0 12.8V10.4H11.2V12.8C11.2 13.68 11.92 14.4 12.8 14.4C13.68 14.4 14.4 13.68 14.4 12.8V1.6H3.2V8.8H1.6V0H16V12.8C16 14.56 14.56 16 12.8 16ZM1.6 12V12.8C1.6 13.68 2.32 14.4 3.2 14.4H10C9.76 13.92 9.6 13.36 9.6 12.8V12H1.6Z\" fill=\"currentColor\" />\r\n            <path d=\"M4.8 3.2H6.4V4.8H4.8V3.2Z\" fill=\"currentColor\" />\r\n            <path d=\"M8 3.2H12.8V4.8H8V3.2Z\" fill=\"currentColor\" />\r\n            <path d=\"M4.8 6.4H6.4V8H4.8V6.4Z\" fill=\"currentColor\" />\r\n            <path d=\"M8 6.4H12.8V8H8V6.4Z\" fill=\"currentColor\" />\r\n        </svg>\r\n        Details\r\n    </ng-template>\r\n    <sol-accordion [multi]=\"multi\">\r\n        <sol-accordion-tab [titleTemplate]=\"titleTemplate\" [disabled]=\"true\">\r\n            <p>This is the primary content of the panel.</p>\r\n        </sol-accordion-tab>\r\n        <sol-accordion-tab [title]=\"'Accordion 2'\" [expanded]=\"true\">\r\n            <h2>HTML Forms</h2>\r\n            <form>\r\n                <label for=\"fname\">First name:</label><br>\r\n                <input type=\"text\" id=\"fname\" name=\"fname\" value=\"John\"><br>\r\n                <label for=\"lname\">Last name:</label><br>\r\n                <input type=\"text\" id=\"lname\" name=\"lname\" value=\"Doe\"><br><br>\r\n                <input type=\"button\" value=\"Submit\">\r\n            </form> \r\n        </sol-accordion-tab>\r\n        <sol-accordion-tab [title]=\"'Accordion 3'\">\r\n            <p>This is the secondary content of the panel.</p>\r\n        </sol-accordion-tab>\r\n        <sol-accordion-tab [title]=\"'Accordion 4'\">\r\n            <p>This is the tertary content of the panel.</p>\r\n        </sol-accordion-tab>\r\n    </sol-accordion>\r\n    `,\r\n})"
            },
            {
                "name": "Alert",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/modal/src/lib/modal.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/button/src/lib/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ButtonStory.bind({})"
            },
            {
                "name": "ButtonStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/button/src/lib/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonComponent>",
                "defaultValue": "(args: ButtonComponent) => ({\r\n    props: args,\r\n    template: `\r\n    <div style=\"display: flex; border: grey 1px solid; padding: 24px; align-items: center; column-gap: 10px;\">\r\n    <lib-button [variant]=\"variant\" [size]=\"'large'\" [disabled]=\"disabled\">Button Text</lib-button>\r\n    <lib-button [variant]=\"variant\" [size]=\"'medium'\" [aria-label]=\"'Button Aria Label'\" [disabled]=\"disabled\">Button Text</lib-button>\r\n    <lib-button [variant]=\"variant\" [size]=\"'small'\" [aria-label]=\"'Button Aria Label'\" [disabled]=\"disabled\">Button Text</lib-button>\r\n    </div>\r\n    `,\r\n})"
            },
            {
                "name": "ButtonStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/button/src/lib/buttonDualIcon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonComponent>",
                "defaultValue": "(args: ButtonComponent) => ({\r\n    props: args,\r\n    template: `\r\n    <ng-template #LeadingIcon>\r\n        <svg style=\"margin-right: 9.6px;\" width=\"8\" height=\"14\" viewBox=\"0 0 8 14\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M0.98112 6.20396L6.1132 0.79102C6.3547 0.536294 6.77735 0.536294 7.01886 0.79102C7.26037 1.04575 7.26037 1.49152 7.01886 1.74624L2.18867 6.84077L7.01886 12.2537C7.26037 12.5084 7.26037 12.9542 7.01886 13.2089C6.77735 13.4637 6.3547 13.4637 6.1132 13.2089L0.98112 7.47759C0.799988 7.28654 0.799988 7.0955 0.799988 6.90445C0.799988 6.58604 0.860365 6.33132 0.98112 6.20396Z\" fill=\"currentColor\"/>\r\n        </svg>\r\n    </ng-template>\r\n    <ng-template #TrailingIcon>\r\n        <svg style=\"margin-left: 9.6px;\" width=\"8\" height=\"14\" viewBox=\"0 0 8 14\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M7.01886 6.20396L1.88678 0.79102C1.64527 0.536294 1.22263 0.536294 0.98112 0.79102C0.73961 1.04575 0.73961 1.49152 0.98112 1.74624L5.81131 6.84077L0.98112 12.2537C0.73961 12.5084 0.73961 12.9542 0.98112 13.2089C1.22263 13.4637 1.64527 13.4637 1.88678 13.2089L7.01886 7.47759C7.19999 7.28654 7.19999 7.0955 7.19999 6.90445C7.19999 6.58604 7.13961 6.33132 7.01886 6.20396Z\" fill=\"currentColor\"/>\r\n        </svg>\r\n    </ng-template>\r\n    <div style=\"display: flex; border: grey 1px solid; padding: 24px; align-items: center; column-gap: 10px;\">\r\n    <lib-button [variant]=\"variant\" [size]=\"'large'\" [aria-label]=\"'Button Aria Label'\" [disabled]=\"disabled\" [IconPositionedFront]=\"LeadingIcon\" [IconPositionedEnd]=\"TrailingIcon\">Button Text</lib-button>\r\n    <lib-button [variant]=\"variant\" [size]=\"'medium'\" [aria-label]=\"'Button Aria Label'\" [disabled]=\"disabled\" [IconPositionedFront]=\"LeadingIcon\" [IconPositionedEnd]=\"TrailingIcon\">Button Text</lib-button>\r\n    <lib-button [variant]=\"variant\" [size]=\"'small'\" [aria-label]=\"'Button Aria Label'\" [disabled]=\"disabled\" [IconPositionedFront]=\"LeadingIcon\" [IconPositionedEnd]=\"TrailingIcon\">Button Text</lib-button>\r\n    </div>\r\n    `\r\n})"
            },
            {
                "name": "ButtonStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/button/src/lib/buttonLeadingIcon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonComponent>",
                "defaultValue": "(args: ButtonComponent) => ({\r\n    props: args,\r\n    template: `\r\n    <ng-template #LeadingAddIcon>\r\n        <svg style=\"margin-right: 9.6px;\" width=\"13\" height=\"13\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M18 9H11V2H9V9H2V11H9V18H11V11H18V9Z\" fill=\"currentColor\" />\r\n        </svg>\r\n    </ng-template>\r\n    <div style=\"display: flex; border: grey 1px solid; padding: 24px; align-items: center; column-gap: 10px;\">\r\n    <lib-button [variant]=\"variant\" [size]=\"'large'\" [aria-label]=\"'Button Aria Label'\" [disabled]=\"disabled\" [IconPositionedFront]=\"LeadingAddIcon\" >Button Text</lib-button>\r\n    <lib-button [variant]=\"variant\" [size]=\"'medium'\" [aria-label]=\"'Button Aria Label'\" [disabled]=\"disabled\" [IconPositionedFront]=\"LeadingAddIcon\">Button Text</lib-button>\r\n    <lib-button [variant]=\"variant\" [size]=\"'small'\" [aria-label]=\"'Button Aria Label'\" [disabled]=\"disabled\" [IconPositionedFront]=\"LeadingAddIcon\">Button Text</lib-button>\r\n    </div>\r\n    `\r\n})"
            },
            {
                "name": "ButtonStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/button/src/lib/buttonTrailingIcon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonComponent>",
                "defaultValue": "(args: ButtonComponent) => ({\r\n    props: args,\r\n    template: `\r\n    <ng-template #trailingAddIcon>\r\n        <svg style=\"margin-left: 9.6px\" width=\"13\" height=\"13\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M18 9H11V2H9V9H2V11H9V18H11V11H18V9Z\" fill=\"currentColor\" />\r\n        </svg>\r\n    </ng-template>\r\n    <div style=\"display: flex; border: grey 1px solid; padding: 24px; align-items: center; column-gap: 10px;\">\r\n    <lib-button [variant]=\"variant\" [size]=\"'large'\" [aria-label]=\"'Button Aria Label'\" [disabled]=\"disabled\" [IconPositionedEnd]=\"trailingAddIcon\">Button Text</lib-button>\r\n    <lib-button [variant]=\"variant\" [size]=\"'medium'\" [aria-label]=\"'Button Aria Label'\" [disabled]=\"disabled\" [IconPositionedEnd]=\"trailingAddIcon\">Button Text</lib-button>\r\n    <lib-button [variant]=\"variant\" [size]=\"'small'\" [aria-label]=\"'Button Aria Label'\" [disabled]=\"disabled\" [IconPositionedEnd]=\"trailingAddIcon\">Button Text</lib-button>\r\n    </div>\r\n    `\r\n})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/accordion/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tabs/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/button/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/button/src/lib/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ButtonStory.bind({})"
            },
            {
                "name": "DualIconBasic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/button/src/lib/buttonDualIcon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ButtonStory.bind({})"
            },
            {
                "name": "DualIconDisabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/button/src/lib/buttonDualIcon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ButtonStory.bind({})"
            },
            {
                "name": "DualIconPrimary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/button/src/lib/buttonDualIcon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ButtonStory.bind({})"
            },
            {
                "name": "DualIconText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/button/src/lib/buttonDualIcon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ButtonStory.bind({})"
            },
            {
                "name": "DualIconWarn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/button/src/lib/buttonDualIcon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ButtonStory.bind({})"
            },
            {
                "name": "Information",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/modal/src/lib/modal.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LeadingIconBasic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/button/src/lib/buttonLeadingIcon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ButtonStory.bind({})"
            },
            {
                "name": "LeadingIconDisabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/button/src/lib/buttonLeadingIcon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ButtonStory.bind({})"
            },
            {
                "name": "LeadingIconPrimary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/button/src/lib/buttonLeadingIcon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ButtonStory.bind({})"
            },
            {
                "name": "LeadingIconText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/button/src/lib/buttonLeadingIcon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ButtonStory.bind({})"
            },
            {
                "name": "LeadingIconWarn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/button/src/lib/buttonLeadingIcon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ButtonStory.bind({})"
            },
            {
                "name": "Multi",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/accordion/src/lib/accordion.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "AccordionStory.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/button/src/lib/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ButtonStory.bind({})"
            },
            {
                "name": "PrimaryExtraLarge",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tabs/src/lib/tabs.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TabStory.bind({})"
            },
            {
                "name": "PrimaryExtraLargeIconOnly",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tabs/src/lib/tabsIconOnly.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TabStory.bind({})"
            },
            {
                "name": "PrimaryExtraLargeIconText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tabs/src/lib/tabsIconText.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TabStory.bind({})"
            },
            {
                "name": "PrimaryLarge",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tabs/src/lib/tabs.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TabStory.bind({})"
            },
            {
                "name": "PrimaryLargeIconOnly",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tabs/src/lib/tabsIconOnly.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TabStory.bind({})"
            },
            {
                "name": "PrimaryLargeIconText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tabs/src/lib/tabsIconText.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TabStory.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/accordion/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tabs/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/button/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Single",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/accordion/src/lib/accordion.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "AccordionStory.bind({})"
            },
            {
                "name": "Standard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/modal/src/lib/modal.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "TabStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tabs/src/lib/tabs.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TabsComponent>",
                "defaultValue": "(args: TabsComponent) => ({\r\n    props: args,\r\n    template: `\r\n    <sol-tabs [variant]=\"variant\" [size]=\"size\">\r\n        <sol-tab [title]=\"'Details'\">Content A - Loaded</sol-tab> \r\n        <sol-tab [title]=\"'Users'\" >Content B - Loaded</sol-tab>\r\n        <sol-tab [title]=\"'History'\" [isActive]=\"true\">Content C - Loaded</sol-tab>\r\n    </sol-tabs>\r\n    `,\r\n})"
            },
            {
                "name": "TabStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tabs/src/lib/tabsIconOnly.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TabsComponent>",
                "defaultValue": "(args: TabsComponent) => ({\r\n    props: args,\r\n    template: `\r\n    <ng-template #titleTemplate1>\r\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M12.8 16H3.2C1.44 16 0 14.56 0 12.8V10.4H11.2V12.8C11.2 13.68 11.92 14.4 12.8 14.4C13.68 14.4 14.4 13.68 14.4 12.8V1.6H3.2V8.8H1.6V0H16V12.8C16 14.56 14.56 16 12.8 16ZM1.6 12V12.8C1.6 13.68 2.32 14.4 3.2 14.4H10C9.76 13.92 9.6 13.36 9.6 12.8V12H1.6Z\" fill=\"currentColor\" />\r\n            <path d=\"M4.8 3.2H6.4V4.8H4.8V3.2Z\" fill=\"currentColor\" />\r\n            <path d=\"M8 3.2H12.8V4.8H8V3.2Z\" fill=\"currentColor\" />\r\n            <path d=\"M4.8 6.4H6.4V8H4.8V6.4Z\" fill=\"currentColor\" />\r\n            <path d=\"M8 6.4H12.8V8H8V6.4Z\" fill=\"currentColor\" />\r\n        </svg>\r\n    </ng-template>\r\n        <ng-template #titleTemplate2>\r\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M8.00005 1.6C8.99579 1.6 9.91494 2 10.5277 2.72C11.1405 3.44 11.5235 4.4 11.5235 5.36C11.5235 6.08 11.3703 6.8 10.9873 7.36C10.8341 7.52 10.7575 7.76 10.6043 7.92L9.37877 9.36L10.9107 10.32C11.4469 10.64 11.983 11.12 12.4426 11.76C13.0554 12.64 13.5149 13.6 13.5915 14.4H2.10218C2.17877 13.6 2.79154 12.56 3.4043 11.76C3.86388 11.2 4.32345 10.72 4.93622 10.32L6.46813 9.36L5.3192 7.92C5.16601 7.76 5.08941 7.6 4.93622 7.44C4.62984 6.8 4.40005 6.08 4.40005 5.36C4.40005 4.4 4.78303 3.44 5.39579 2.72C6.08516 2 7.0043 1.6 8.00005 1.6ZM8.00005 0C6.54473 0 5.3192 0.56 4.32345 1.6C3.4043 2.64 2.86813 4 2.86813 5.36C2.86813 6.4 3.09792 7.36 3.63409 8.24C3.78728 8.48 3.94047 8.72 4.17026 8.96C3.4809 9.44 2.79154 10 2.25537 10.72C1.33622 11.92 0.800049 13.44 0.800049 14.64C0.800049 15.44 1.41281 16 2.25537 16H13.7447C14.5107 16 15.2 15.36 15.2 14.64C15.2 13.44 14.6639 12 13.7447 10.8C13.2086 10.08 12.5192 9.44 11.8298 9.04C11.983 8.8 12.2128 8.56 12.366 8.32C12.9022 7.44 13.132 6.48 13.132 5.44C13.0554 4 12.5192 2.64 11.6 1.6C10.6809 0.56 9.37877 0 8.00005 0V0Z\" fill=\"currentColor\"/>\r\n            </svg> \r\n        </ng-template>\r\n        <ng-template #titleTemplate3>\r\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M8.55997 0.800049C7.03997 0.800049 5.51997 1.29096 4.31997 2.27278C3.27997 3.09096 2.39997 4.31823 1.99997 5.5455L1.67997 4.97278C1.51997 4.80914 1.43997 4.72732 1.27997 4.6455C1.19997 4.6455 1.11997 4.6455 1.11997 4.6455C1.03997 4.6455 0.87997 4.6455 0.79997 4.72732C0.39997 4.89096 0.31997 5.30005 0.47997 5.62732L1.59997 7.67278C1.67997 7.83641 1.75997 7.91823 1.91997 8.00005C2.07997 8.08187 2.23997 8.00005 2.39997 7.91823L4.39997 6.77278C4.63997 6.77278 4.71997 6.60914 4.79997 6.4455C4.79997 6.28187 4.79997 6.03641 4.71997 5.87278C4.63997 5.70914 4.47997 5.62732 4.31997 5.5455C4.15997 5.5455 3.99997 5.5455 3.83997 5.62732L3.19997 5.95459C3.99997 3.66369 6.15997 2.19096 8.55997 2.19096C11.68 2.19096 14.24 4.80914 14.24 8.00005C14.24 11.191 11.68 13.8091 8.55997 13.8091C7.03997 13.8091 5.59997 13.2364 4.55997 12.091C4.31997 11.8455 3.91997 11.8455 3.59997 12.091C3.35997 12.3364 3.35997 12.8273 3.59997 13.0728C4.95997 14.4637 6.71997 15.2 8.55997 15.2C12.4 15.2 15.6 12.0091 15.6 8.00005C15.6 3.99096 12.48 0.800049 8.55997 0.800049Z\" fill=\"currentColor\"/>\r\n                <path d=\"M8.15997 4.56369C7.83997 4.56369 7.51997 4.89096 7.51997 5.21823V8.81823C7.51997 9.1455 7.83997 9.47278 8.15997 9.47278H11.12C11.44 9.47278 11.76 9.1455 11.76 8.81823C11.76 8.49096 11.44 8.16369 11.12 8.16369H8.79997V5.21823C8.79997 4.89096 8.47997 4.56369 8.15997 4.56369Z\" fill=\"currentColor\"/>\r\n            </svg>\r\n        </ng-template>\r\n    <sol-tabs [variant]=\"variant\" [size]=\"size\">\r\n        <sol-tab [titleTemplate]=\"titleTemplate1\">Content A - Loaded</sol-tab> \r\n        <sol-tab [titleTemplate]=\"titleTemplate2\" >Content B - Loaded</sol-tab>\r\n        <sol-tab [titleTemplate]=\"titleTemplate3\" [isActive]=\"true\">Content C - Loaded</sol-tab>\r\n    </sol-tabs>\r\n    `,\r\n})"
            },
            {
                "name": "TabStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tabs/src/lib/tabsIconText.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TabsComponent>",
                "defaultValue": "(args: TabsComponent) => ({\r\n    props: args,\r\n    template: `\r\n    <ng-template #titleTemplate1>\r\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M12.8 16H3.2C1.44 16 0 14.56 0 12.8V10.4H11.2V12.8C11.2 13.68 11.92 14.4 12.8 14.4C13.68 14.4 14.4 13.68 14.4 12.8V1.6H3.2V8.8H1.6V0H16V12.8C16 14.56 14.56 16 12.8 16ZM1.6 12V12.8C1.6 13.68 2.32 14.4 3.2 14.4H10C9.76 13.92 9.6 13.36 9.6 12.8V12H1.6Z\" fill=\"currentColor\" />\r\n            <path d=\"M4.8 3.2H6.4V4.8H4.8V3.2Z\" fill=\"currentColor\" />\r\n            <path d=\"M8 3.2H12.8V4.8H8V3.2Z\" fill=\"currentColor\" />\r\n            <path d=\"M4.8 6.4H6.4V8H4.8V6.4Z\" fill=\"currentColor\" />\r\n            <path d=\"M8 6.4H12.8V8H8V6.4Z\" fill=\"currentColor\" />\r\n        </svg>\r\n        Details\r\n    </ng-template>\r\n        <ng-template #titleTemplate2>\r\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M8.00005 1.6C8.99579 1.6 9.91494 2 10.5277 2.72C11.1405 3.44 11.5235 4.4 11.5235 5.36C11.5235 6.08 11.3703 6.8 10.9873 7.36C10.8341 7.52 10.7575 7.76 10.6043 7.92L9.37877 9.36L10.9107 10.32C11.4469 10.64 11.983 11.12 12.4426 11.76C13.0554 12.64 13.5149 13.6 13.5915 14.4H2.10218C2.17877 13.6 2.79154 12.56 3.4043 11.76C3.86388 11.2 4.32345 10.72 4.93622 10.32L6.46813 9.36L5.3192 7.92C5.16601 7.76 5.08941 7.6 4.93622 7.44C4.62984 6.8 4.40005 6.08 4.40005 5.36C4.40005 4.4 4.78303 3.44 5.39579 2.72C6.08516 2 7.0043 1.6 8.00005 1.6ZM8.00005 0C6.54473 0 5.3192 0.56 4.32345 1.6C3.4043 2.64 2.86813 4 2.86813 5.36C2.86813 6.4 3.09792 7.36 3.63409 8.24C3.78728 8.48 3.94047 8.72 4.17026 8.96C3.4809 9.44 2.79154 10 2.25537 10.72C1.33622 11.92 0.800049 13.44 0.800049 14.64C0.800049 15.44 1.41281 16 2.25537 16H13.7447C14.5107 16 15.2 15.36 15.2 14.64C15.2 13.44 14.6639 12 13.7447 10.8C13.2086 10.08 12.5192 9.44 11.8298 9.04C11.983 8.8 12.2128 8.56 12.366 8.32C12.9022 7.44 13.132 6.48 13.132 5.44C13.0554 4 12.5192 2.64 11.6 1.6C10.6809 0.56 9.37877 0 8.00005 0V0Z\" fill=\"currentColor\"/>\r\n            </svg>            \r\n            Users\r\n        </ng-template>\r\n        <ng-template #titleTemplate3>\r\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M8.55997 0.800049C7.03997 0.800049 5.51997 1.29096 4.31997 2.27278C3.27997 3.09096 2.39997 4.31823 1.99997 5.5455L1.67997 4.97278C1.51997 4.80914 1.43997 4.72732 1.27997 4.6455C1.19997 4.6455 1.11997 4.6455 1.11997 4.6455C1.03997 4.6455 0.87997 4.6455 0.79997 4.72732C0.39997 4.89096 0.31997 5.30005 0.47997 5.62732L1.59997 7.67278C1.67997 7.83641 1.75997 7.91823 1.91997 8.00005C2.07997 8.08187 2.23997 8.00005 2.39997 7.91823L4.39997 6.77278C4.63997 6.77278 4.71997 6.60914 4.79997 6.4455C4.79997 6.28187 4.79997 6.03641 4.71997 5.87278C4.63997 5.70914 4.47997 5.62732 4.31997 5.5455C4.15997 5.5455 3.99997 5.5455 3.83997 5.62732L3.19997 5.95459C3.99997 3.66369 6.15997 2.19096 8.55997 2.19096C11.68 2.19096 14.24 4.80914 14.24 8.00005C14.24 11.191 11.68 13.8091 8.55997 13.8091C7.03997 13.8091 5.59997 13.2364 4.55997 12.091C4.31997 11.8455 3.91997 11.8455 3.59997 12.091C3.35997 12.3364 3.35997 12.8273 3.59997 13.0728C4.95997 14.4637 6.71997 15.2 8.55997 15.2C12.4 15.2 15.6 12.0091 15.6 8.00005C15.6 3.99096 12.48 0.800049 8.55997 0.800049Z\" fill=\"currentColor\"/>\r\n                <path d=\"M8.15997 4.56369C7.83997 4.56369 7.51997 4.89096 7.51997 5.21823V8.81823C7.51997 9.1455 7.83997 9.47278 8.15997 9.47278H11.12C11.44 9.47278 11.76 9.1455 11.76 8.81823C11.76 8.49096 11.44 8.16369 11.12 8.16369H8.79997V5.21823C8.79997 4.89096 8.47997 4.56369 8.15997 4.56369Z\" fill=\"currentColor\"/>\r\n            </svg>            \r\n            History\r\n        </ng-template>\r\n    <sol-tabs [variant]=\"variant\" [size]=\"size\">\r\n        <sol-tab [titleTemplate]=\"titleTemplate1\">Content A - Loaded</sol-tab> \r\n        <sol-tab [titleTemplate]=\"titleTemplate2\" >Content B - Loaded</sol-tab>\r\n        <sol-tab [titleTemplate]=\"titleTemplate3\" [isActive]=\"true\">Content C - Loaded</sol-tab>\r\n    </sol-tabs>\r\n    `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/modal/src/lib/modal.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<LaunchDialogComponent>",
                "defaultValue": "(args: LaunchDialogComponent) => ({\r\n    props: args,\r\n    template: `<launch-dialog [modalType]=\"modalType\"></launch-dialog>`\r\n  })"
            },
            {
                "name": "Text",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/button/src/lib/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ButtonStory.bind({})"
            },
            {
                "name": "TextExtraLarge",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tabs/src/lib/tabs.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TabStory.bind({})"
            },
            {
                "name": "TextExtraLargeIconOnly",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tabs/src/lib/tabsIconOnly.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TabStory.bind({})"
            },
            {
                "name": "TextExtraLargeIconText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tabs/src/lib/tabsIconText.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TabStory.bind({})"
            },
            {
                "name": "TextLarge",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tabs/src/lib/tabs.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TabStory.bind({})"
            },
            {
                "name": "TextLargeIconOnly",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tabs/src/lib/tabsIconOnly.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TabStory.bind({})"
            },
            {
                "name": "TextLargeIconText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tabs/src/lib/tabsIconText.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TabStory.bind({})"
            },
            {
                "name": "tooltipArrowDark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tooltip/src/lib/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ToolTipStory.bind({})"
            },
            {
                "name": "tooltipArrowDarkOnClick",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tooltip/src/lib/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ToolTipStory.bind({})"
            },
            {
                "name": "tooltipArrowDarkOnClickInteractive",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tooltip/src/lib/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ToolTipStory.bind({})"
            },
            {
                "name": "tooltipArrowLight",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tooltip/src/lib/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ToolTipStory.bind({})"
            },
            {
                "name": "tooltipArrowLightOnClick",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tooltip/src/lib/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ToolTipStory.bind({})"
            },
            {
                "name": "tooltipDark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tooltip/src/lib/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ToolTipStory.bind({})"
            },
            {
                "name": "tooltipDarkInteractive",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tooltip/src/lib/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ToolTipStory.bind({})"
            },
            {
                "name": "tooltipDarkOnClick",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tooltip/src/lib/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ToolTipStory.bind({})"
            },
            {
                "name": "tooltipLight",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tooltip/src/lib/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ToolTipStory.bind({})"
            },
            {
                "name": "tooltipLightOnClick",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tooltip/src/lib/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ToolTipStory.bind({})"
            },
            {
                "name": "ToolTipStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tooltip/src/lib/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TooltipDirective>",
                "defaultValue": "(args: TooltipDirective) => ({\r\n    props: args,\r\n    template: `\r\n    <div style=\"width:100%;height:300px;display:flex; justify-content:center;align-items:center;gap:25px;\">\r\n        <div>\r\n            <svg solTooltip [trigger]=\"trigger\" [position]=\"'top'\" [ariaDescribedBy]=\"'Tooltip top example'\" [interactive]=\"interactive\" [darkMode]=\"darkMode\" [content]=\"'This is a tooltip <br> Tooltips are used to describe or identify an element. In most scenarios, tooltips help the user understand the meaning, function or alt-text of an element.'\" [arrow]=\"arrow\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M10 0C4.5 0 0 4.5 0 10C0 15.5 4.5 20 10 20C15.5 20 20 15.5 20 10C20 4.5 15.5 0 10 0ZM10 18C5.6 18 2 14.4 2 10C2 5.6 5.6 2 10 2C14.4 2 18 5.6 18 10C18 14.4 14.4 18 10 18Z\" fill=\"black\"/>\r\n                <path d=\"M10.1 5.3C9 5.3 8 5.5 7 6.1L7.7 7.5C8.5 7.1 9.3 6.9 9.9 6.9C10.3 6.9 10.6 7 10.8 7.1C11 7.2 11.1 7.5 11.1 7.7C11.1 7.9 11 8.2 10.9 8.4C10.8 8.6 10.5 8.9 10 9.2C9.5 9.5 9.3 9.9 9.2 10.2C9 10.5 9 10.8 9 11.3V12H10V11.4C10 11.1 10.3 10.9 10.4 10.8C10.5 10.7 10.9 10.4 11.3 10.1C11.9 9.7 12.4 9.3 12.6 8.9C12.8 8.5 13 8.1 13 7.6C13 6.9 12.8 6.3 12.2 5.9C11.7 5.5 11 5.3 10.1 5.3Z\" fill=\"black\"/>\r\n                <path d=\"M9.7 12.9C9.3 12.9 9.1 13 8.9 13.2C8.7 13.4 8.6 13.7 8.6 14C8.6 14.4 8.7 14.6 8.9 14.8C9.1 15 9.4 15.1 9.7 15.1C10.1 15.1 10.3 15 10.5 14.8C10.7 14.6 10.8 14.3 10.8 14C10.8 13.7 10.7 13.4 10.5 13.2C10.3 13 10.1 12.9 9.7 12.9Z\" fill=\"black\"/>\r\n            </svg>\r\n        </div>\r\n        <div>\r\n            <svg solTooltip [trigger]=\"trigger\" [position]=\"'top-start'\" [ariaDescribedBy]=\"'Tooltip top start example'\" [interactive]=\"interactive\" [darkMode]=\"darkMode\" [content]=\"'This is a tooltip <br> Tooltips are used to describe or identify an element. In most scenarios, tooltips help the user understand the meaning, function or alt-text of an element.'\" [arrow]=\"arrow\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M10 0C4.5 0 0 4.5 0 10C0 15.5 4.5 20 10 20C15.5 20 20 15.5 20 10C20 4.5 15.5 0 10 0ZM10 18C5.6 18 2 14.4 2 10C2 5.6 5.6 2 10 2C14.4 2 18 5.6 18 10C18 14.4 14.4 18 10 18Z\" fill=\"black\"/>\r\n                <path d=\"M10.1 5.3C9 5.3 8 5.5 7 6.1L7.7 7.5C8.5 7.1 9.3 6.9 9.9 6.9C10.3 6.9 10.6 7 10.8 7.1C11 7.2 11.1 7.5 11.1 7.7C11.1 7.9 11 8.2 10.9 8.4C10.8 8.6 10.5 8.9 10 9.2C9.5 9.5 9.3 9.9 9.2 10.2C9 10.5 9 10.8 9 11.3V12H10V11.4C10 11.1 10.3 10.9 10.4 10.8C10.5 10.7 10.9 10.4 11.3 10.1C11.9 9.7 12.4 9.3 12.6 8.9C12.8 8.5 13 8.1 13 7.6C13 6.9 12.8 6.3 12.2 5.9C11.7 5.5 11 5.3 10.1 5.3Z\" fill=\"black\"/>\r\n                <path d=\"M9.7 12.9C9.3 12.9 9.1 13 8.9 13.2C8.7 13.4 8.6 13.7 8.6 14C8.6 14.4 8.7 14.6 8.9 14.8C9.1 15 9.4 15.1 9.7 15.1C10.1 15.1 10.3 15 10.5 14.8C10.7 14.6 10.8 14.3 10.8 14C10.8 13.7 10.7 13.4 10.5 13.2C10.3 13 10.1 12.9 9.7 12.9Z\" fill=\"black\"/>\r\n            </svg>\r\n        </div>\r\n        <div>\r\n            <svg solTooltip [trigger]=\"trigger\" [position]=\"'top-end'\" [ariaDescribedBy]=\"'Tooltip top end example'\" [interactive]=\"interactive\" [darkMode]=\"darkMode\" [content]=\"'This is a tooltip <br> Tooltips are used to describe or identify an element. In most scenarios, tooltips help the user understand the meaning, function or alt-text of an element.'\" [arrow]=\"arrow\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M10 0C4.5 0 0 4.5 0 10C0 15.5 4.5 20 10 20C15.5 20 20 15.5 20 10C20 4.5 15.5 0 10 0ZM10 18C5.6 18 2 14.4 2 10C2 5.6 5.6 2 10 2C14.4 2 18 5.6 18 10C18 14.4 14.4 18 10 18Z\" fill=\"black\"/>\r\n                <path d=\"M10.1 5.3C9 5.3 8 5.5 7 6.1L7.7 7.5C8.5 7.1 9.3 6.9 9.9 6.9C10.3 6.9 10.6 7 10.8 7.1C11 7.2 11.1 7.5 11.1 7.7C11.1 7.9 11 8.2 10.9 8.4C10.8 8.6 10.5 8.9 10 9.2C9.5 9.5 9.3 9.9 9.2 10.2C9 10.5 9 10.8 9 11.3V12H10V11.4C10 11.1 10.3 10.9 10.4 10.8C10.5 10.7 10.9 10.4 11.3 10.1C11.9 9.7 12.4 9.3 12.6 8.9C12.8 8.5 13 8.1 13 7.6C13 6.9 12.8 6.3 12.2 5.9C11.7 5.5 11 5.3 10.1 5.3Z\" fill=\"black\"/>\r\n                <path d=\"M9.7 12.9C9.3 12.9 9.1 13 8.9 13.2C8.7 13.4 8.6 13.7 8.6 14C8.6 14.4 8.7 14.6 8.9 14.8C9.1 15 9.4 15.1 9.7 15.1C10.1 15.1 10.3 15 10.5 14.8C10.7 14.6 10.8 14.3 10.8 14C10.8 13.7 10.7 13.4 10.5 13.2C10.3 13 10.1 12.9 9.7 12.9Z\" fill=\"black\"/>\r\n            </svg>\r\n        </div>\r\n        <div>\r\n            <svg solTooltip [trigger]=\"trigger\" [position]=\"'bottom'\" [ariaDescribedBy]=\"'Tooltip bottom example'\" [interactive]=\"interactive\" [darkMode]=\"darkMode\" [content]=\"'This is a tooltip <br> Tooltips are used to describe or identify an element. In most scenarios, tooltips help the user understand the meaning, function or alt-text of an element.'\" [arrow]=\"arrow\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M10 0C4.5 0 0 4.5 0 10C0 15.5 4.5 20 10 20C15.5 20 20 15.5 20 10C20 4.5 15.5 0 10 0ZM10 18C5.6 18 2 14.4 2 10C2 5.6 5.6 2 10 2C14.4 2 18 5.6 18 10C18 14.4 14.4 18 10 18Z\" fill=\"black\"/>\r\n                <path d=\"M10.1 5.3C9 5.3 8 5.5 7 6.1L7.7 7.5C8.5 7.1 9.3 6.9 9.9 6.9C10.3 6.9 10.6 7 10.8 7.1C11 7.2 11.1 7.5 11.1 7.7C11.1 7.9 11 8.2 10.9 8.4C10.8 8.6 10.5 8.9 10 9.2C9.5 9.5 9.3 9.9 9.2 10.2C9 10.5 9 10.8 9 11.3V12H10V11.4C10 11.1 10.3 10.9 10.4 10.8C10.5 10.7 10.9 10.4 11.3 10.1C11.9 9.7 12.4 9.3 12.6 8.9C12.8 8.5 13 8.1 13 7.6C13 6.9 12.8 6.3 12.2 5.9C11.7 5.5 11 5.3 10.1 5.3Z\" fill=\"black\"/>\r\n                <path d=\"M9.7 12.9C9.3 12.9 9.1 13 8.9 13.2C8.7 13.4 8.6 13.7 8.6 14C8.6 14.4 8.7 14.6 8.9 14.8C9.1 15 9.4 15.1 9.7 15.1C10.1 15.1 10.3 15 10.5 14.8C10.7 14.6 10.8 14.3 10.8 14C10.8 13.7 10.7 13.4 10.5 13.2C10.3 13 10.1 12.9 9.7 12.9Z\" fill=\"black\"/>\r\n            </svg>\r\n        </div>\r\n        <div>\r\n            <svg solTooltip [trigger]=\"trigger\" [position]=\"'bottom-start'\" [ariaDescribedBy]=\"'Tooltip bottom start example'\" [interactive]=\"interactive\" [darkMode]=\"darkMode\" [content]=\"'This is a tooltip <br> Tooltips are used to describe or identify an element. In most scenarios, tooltips help the user understand the meaning, function or alt-text of an element.'\" [arrow]=\"arrow\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M10 0C4.5 0 0 4.5 0 10C0 15.5 4.5 20 10 20C15.5 20 20 15.5 20 10C20 4.5 15.5 0 10 0ZM10 18C5.6 18 2 14.4 2 10C2 5.6 5.6 2 10 2C14.4 2 18 5.6 18 10C18 14.4 14.4 18 10 18Z\" fill=\"black\"/>\r\n                <path d=\"M10.1 5.3C9 5.3 8 5.5 7 6.1L7.7 7.5C8.5 7.1 9.3 6.9 9.9 6.9C10.3 6.9 10.6 7 10.8 7.1C11 7.2 11.1 7.5 11.1 7.7C11.1 7.9 11 8.2 10.9 8.4C10.8 8.6 10.5 8.9 10 9.2C9.5 9.5 9.3 9.9 9.2 10.2C9 10.5 9 10.8 9 11.3V12H10V11.4C10 11.1 10.3 10.9 10.4 10.8C10.5 10.7 10.9 10.4 11.3 10.1C11.9 9.7 12.4 9.3 12.6 8.9C12.8 8.5 13 8.1 13 7.6C13 6.9 12.8 6.3 12.2 5.9C11.7 5.5 11 5.3 10.1 5.3Z\" fill=\"black\"/>\r\n                <path d=\"M9.7 12.9C9.3 12.9 9.1 13 8.9 13.2C8.7 13.4 8.6 13.7 8.6 14C8.6 14.4 8.7 14.6 8.9 14.8C9.1 15 9.4 15.1 9.7 15.1C10.1 15.1 10.3 15 10.5 14.8C10.7 14.6 10.8 14.3 10.8 14C10.8 13.7 10.7 13.4 10.5 13.2C10.3 13 10.1 12.9 9.7 12.9Z\" fill=\"black\"/>\r\n            </svg>\r\n        </div>\r\n        <div>\r\n            <svg solTooltip [trigger]=\"trigger\" [position]=\"'bottom-end'\" [ariaDescribedBy]=\"'Tooltip bottom end example'\" [interactive]=\"interactive\" [darkMode]=\"darkMode\" [content]=\"'This is a tooltip <br> Tooltips are used to describe or identify an element. In most scenarios, tooltips help the user understand the meaning, function or alt-text of an element.'\" [arrow]=\"arrow\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M10 0C4.5 0 0 4.5 0 10C0 15.5 4.5 20 10 20C15.5 20 20 15.5 20 10C20 4.5 15.5 0 10 0ZM10 18C5.6 18 2 14.4 2 10C2 5.6 5.6 2 10 2C14.4 2 18 5.6 18 10C18 14.4 14.4 18 10 18Z\" fill=\"black\"/>\r\n                <path d=\"M10.1 5.3C9 5.3 8 5.5 7 6.1L7.7 7.5C8.5 7.1 9.3 6.9 9.9 6.9C10.3 6.9 10.6 7 10.8 7.1C11 7.2 11.1 7.5 11.1 7.7C11.1 7.9 11 8.2 10.9 8.4C10.8 8.6 10.5 8.9 10 9.2C9.5 9.5 9.3 9.9 9.2 10.2C9 10.5 9 10.8 9 11.3V12H10V11.4C10 11.1 10.3 10.9 10.4 10.8C10.5 10.7 10.9 10.4 11.3 10.1C11.9 9.7 12.4 9.3 12.6 8.9C12.8 8.5 13 8.1 13 7.6C13 6.9 12.8 6.3 12.2 5.9C11.7 5.5 11 5.3 10.1 5.3Z\" fill=\"black\"/>\r\n                <path d=\"M9.7 12.9C9.3 12.9 9.1 13 8.9 13.2C8.7 13.4 8.6 13.7 8.6 14C8.6 14.4 8.7 14.6 8.9 14.8C9.1 15 9.4 15.1 9.7 15.1C10.1 15.1 10.3 15 10.5 14.8C10.7 14.6 10.8 14.3 10.8 14C10.8 13.7 10.7 13.4 10.5 13.2C10.3 13 10.1 12.9 9.7 12.9Z\" fill=\"black\"/>\r\n            </svg>\r\n        </div>\r\n        <div>\r\n            <svg solTooltip [trigger]=\"trigger\" [position]=\"'right'\" [ariaDescribedBy]=\"'Tooltip right example'\" [interactive]=\"interactive\" [darkMode]=\"darkMode\" [content]=\"'This is a tooltip <br> Tooltips are used to describe or identify an element. In most scenarios, tooltips help the user understand the meaning, function or alt-text of an element.'\" [arrow]=\"arrow\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M10 0C4.5 0 0 4.5 0 10C0 15.5 4.5 20 10 20C15.5 20 20 15.5 20 10C20 4.5 15.5 0 10 0ZM10 18C5.6 18 2 14.4 2 10C2 5.6 5.6 2 10 2C14.4 2 18 5.6 18 10C18 14.4 14.4 18 10 18Z\" fill=\"black\"/>\r\n                <path d=\"M10.1 5.3C9 5.3 8 5.5 7 6.1L7.7 7.5C8.5 7.1 9.3 6.9 9.9 6.9C10.3 6.9 10.6 7 10.8 7.1C11 7.2 11.1 7.5 11.1 7.7C11.1 7.9 11 8.2 10.9 8.4C10.8 8.6 10.5 8.9 10 9.2C9.5 9.5 9.3 9.9 9.2 10.2C9 10.5 9 10.8 9 11.3V12H10V11.4C10 11.1 10.3 10.9 10.4 10.8C10.5 10.7 10.9 10.4 11.3 10.1C11.9 9.7 12.4 9.3 12.6 8.9C12.8 8.5 13 8.1 13 7.6C13 6.9 12.8 6.3 12.2 5.9C11.7 5.5 11 5.3 10.1 5.3Z\" fill=\"black\"/>\r\n                <path d=\"M9.7 12.9C9.3 12.9 9.1 13 8.9 13.2C8.7 13.4 8.6 13.7 8.6 14C8.6 14.4 8.7 14.6 8.9 14.8C9.1 15 9.4 15.1 9.7 15.1C10.1 15.1 10.3 15 10.5 14.8C10.7 14.6 10.8 14.3 10.8 14C10.8 13.7 10.7 13.4 10.5 13.2C10.3 13 10.1 12.9 9.7 12.9Z\" fill=\"black\"/>\r\n            </svg>\r\n        </div>\r\n        <div>\r\n            <svg solTooltip [trigger]=\"trigger\" [position]=\"'right-start'\" [ariaDescribedBy]=\"'Tooltip right start example'\" [interactive]=\"interactive\" [darkMode]=\"darkMode\" [content]=\"'This is a tooltip <br> Tooltips are used to describe or identify an element. In most scenarios, tooltips help the user understand the meaning, function or alt-text of an element.'\" [arrow]=\"arrow\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M10 0C4.5 0 0 4.5 0 10C0 15.5 4.5 20 10 20C15.5 20 20 15.5 20 10C20 4.5 15.5 0 10 0ZM10 18C5.6 18 2 14.4 2 10C2 5.6 5.6 2 10 2C14.4 2 18 5.6 18 10C18 14.4 14.4 18 10 18Z\" fill=\"black\"/>\r\n                <path d=\"M10.1 5.3C9 5.3 8 5.5 7 6.1L7.7 7.5C8.5 7.1 9.3 6.9 9.9 6.9C10.3 6.9 10.6 7 10.8 7.1C11 7.2 11.1 7.5 11.1 7.7C11.1 7.9 11 8.2 10.9 8.4C10.8 8.6 10.5 8.9 10 9.2C9.5 9.5 9.3 9.9 9.2 10.2C9 10.5 9 10.8 9 11.3V12H10V11.4C10 11.1 10.3 10.9 10.4 10.8C10.5 10.7 10.9 10.4 11.3 10.1C11.9 9.7 12.4 9.3 12.6 8.9C12.8 8.5 13 8.1 13 7.6C13 6.9 12.8 6.3 12.2 5.9C11.7 5.5 11 5.3 10.1 5.3Z\" fill=\"black\"/>\r\n                <path d=\"M9.7 12.9C9.3 12.9 9.1 13 8.9 13.2C8.7 13.4 8.6 13.7 8.6 14C8.6 14.4 8.7 14.6 8.9 14.8C9.1 15 9.4 15.1 9.7 15.1C10.1 15.1 10.3 15 10.5 14.8C10.7 14.6 10.8 14.3 10.8 14C10.8 13.7 10.7 13.4 10.5 13.2C10.3 13 10.1 12.9 9.7 12.9Z\" fill=\"black\"/>\r\n            </svg>\r\n        </div>\r\n        <div>\r\n            <svg solTooltip [trigger]=\"trigger\" [position]=\"'right-end'\" [ariaDescribedBy]=\"'Tooltip right end example'\" [interactive]=\"interactive\" [darkMode]=\"darkMode\" [content]=\"'This is a tooltip <br> Tooltips are used to describe or identify an element. In most scenarios, tooltips help the user understand the meaning, function or alt-text of an element.'\" [arrow]=\"arrow\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M10 0C4.5 0 0 4.5 0 10C0 15.5 4.5 20 10 20C15.5 20 20 15.5 20 10C20 4.5 15.5 0 10 0ZM10 18C5.6 18 2 14.4 2 10C2 5.6 5.6 2 10 2C14.4 2 18 5.6 18 10C18 14.4 14.4 18 10 18Z\" fill=\"black\"/>\r\n                <path d=\"M10.1 5.3C9 5.3 8 5.5 7 6.1L7.7 7.5C8.5 7.1 9.3 6.9 9.9 6.9C10.3 6.9 10.6 7 10.8 7.1C11 7.2 11.1 7.5 11.1 7.7C11.1 7.9 11 8.2 10.9 8.4C10.8 8.6 10.5 8.9 10 9.2C9.5 9.5 9.3 9.9 9.2 10.2C9 10.5 9 10.8 9 11.3V12H10V11.4C10 11.1 10.3 10.9 10.4 10.8C10.5 10.7 10.9 10.4 11.3 10.1C11.9 9.7 12.4 9.3 12.6 8.9C12.8 8.5 13 8.1 13 7.6C13 6.9 12.8 6.3 12.2 5.9C11.7 5.5 11 5.3 10.1 5.3Z\" fill=\"black\"/>\r\n                <path d=\"M9.7 12.9C9.3 12.9 9.1 13 8.9 13.2C8.7 13.4 8.6 13.7 8.6 14C8.6 14.4 8.7 14.6 8.9 14.8C9.1 15 9.4 15.1 9.7 15.1C10.1 15.1 10.3 15 10.5 14.8C10.7 14.6 10.8 14.3 10.8 14C10.8 13.7 10.7 13.4 10.5 13.2C10.3 13 10.1 12.9 9.7 12.9Z\" fill=\"black\"/>\r\n            </svg>\r\n        </div>\r\n        <div>\r\n            <svg solTooltip [trigger]=\"trigger\" [position]=\"'left'\" [ariaDescribedBy]=\"'Tooltip left example'\" [interactive]=\"interactive\" [darkMode]=\"darkMode\" [content]=\"'This is a tooltip <br> Tooltips are used to describe or identify an element. In most scenarios, tooltips help the user understand the meaning, function or alt-text of an element.'\" [arrow]=\"arrow\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M10 0C4.5 0 0 4.5 0 10C0 15.5 4.5 20 10 20C15.5 20 20 15.5 20 10C20 4.5 15.5 0 10 0ZM10 18C5.6 18 2 14.4 2 10C2 5.6 5.6 2 10 2C14.4 2 18 5.6 18 10C18 14.4 14.4 18 10 18Z\" fill=\"black\"/>\r\n                <path d=\"M10.1 5.3C9 5.3 8 5.5 7 6.1L7.7 7.5C8.5 7.1 9.3 6.9 9.9 6.9C10.3 6.9 10.6 7 10.8 7.1C11 7.2 11.1 7.5 11.1 7.7C11.1 7.9 11 8.2 10.9 8.4C10.8 8.6 10.5 8.9 10 9.2C9.5 9.5 9.3 9.9 9.2 10.2C9 10.5 9 10.8 9 11.3V12H10V11.4C10 11.1 10.3 10.9 10.4 10.8C10.5 10.7 10.9 10.4 11.3 10.1C11.9 9.7 12.4 9.3 12.6 8.9C12.8 8.5 13 8.1 13 7.6C13 6.9 12.8 6.3 12.2 5.9C11.7 5.5 11 5.3 10.1 5.3Z\" fill=\"black\"/>\r\n                <path d=\"M9.7 12.9C9.3 12.9 9.1 13 8.9 13.2C8.7 13.4 8.6 13.7 8.6 14C8.6 14.4 8.7 14.6 8.9 14.8C9.1 15 9.4 15.1 9.7 15.1C10.1 15.1 10.3 15 10.5 14.8C10.7 14.6 10.8 14.3 10.8 14C10.8 13.7 10.7 13.4 10.5 13.2C10.3 13 10.1 12.9 9.7 12.9Z\" fill=\"black\"/>\r\n            </svg>\r\n        </div>\r\n        <div>\r\n            <svg solTooltip [trigger]=\"trigger\" [position]=\"'left-start'\" [ariaDescribedBy]=\"'Tooltip left start example'\" [interactive]=\"interactive\" [darkMode]=\"darkMode\" [content]=\"'This is a tooltip <br> Tooltips are used to describe or identify an element. In most scenarios, tooltips help the user understand the meaning, function or alt-text of an element.'\" [arrow]=\"arrow\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M10 0C4.5 0 0 4.5 0 10C0 15.5 4.5 20 10 20C15.5 20 20 15.5 20 10C20 4.5 15.5 0 10 0ZM10 18C5.6 18 2 14.4 2 10C2 5.6 5.6 2 10 2C14.4 2 18 5.6 18 10C18 14.4 14.4 18 10 18Z\" fill=\"black\"/>\r\n                <path d=\"M10.1 5.3C9 5.3 8 5.5 7 6.1L7.7 7.5C8.5 7.1 9.3 6.9 9.9 6.9C10.3 6.9 10.6 7 10.8 7.1C11 7.2 11.1 7.5 11.1 7.7C11.1 7.9 11 8.2 10.9 8.4C10.8 8.6 10.5 8.9 10 9.2C9.5 9.5 9.3 9.9 9.2 10.2C9 10.5 9 10.8 9 11.3V12H10V11.4C10 11.1 10.3 10.9 10.4 10.8C10.5 10.7 10.9 10.4 11.3 10.1C11.9 9.7 12.4 9.3 12.6 8.9C12.8 8.5 13 8.1 13 7.6C13 6.9 12.8 6.3 12.2 5.9C11.7 5.5 11 5.3 10.1 5.3Z\" fill=\"black\"/>\r\n                <path d=\"M9.7 12.9C9.3 12.9 9.1 13 8.9 13.2C8.7 13.4 8.6 13.7 8.6 14C8.6 14.4 8.7 14.6 8.9 14.8C9.1 15 9.4 15.1 9.7 15.1C10.1 15.1 10.3 15 10.5 14.8C10.7 14.6 10.8 14.3 10.8 14C10.8 13.7 10.7 13.4 10.5 13.2C10.3 13 10.1 12.9 9.7 12.9Z\" fill=\"black\"/>\r\n            </svg>\r\n        </div>\r\n        <div>\r\n            <svg solTooltip [trigger]=\"trigger\" [position]=\"'left-end'\" [ariaDescribedBy]=\"'Tooltip left end example'\" [interactive]=\"interactive\" [darkMode]=\"darkMode\" [content]=\"'This is a tooltip <br> Tooltips are used to describe or identify an element. In most scenarios, tooltips help the user understand the meaning, function or alt-text of an element.'\" [arrow]=\"arrow\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M10 0C4.5 0 0 4.5 0 10C0 15.5 4.5 20 10 20C15.5 20 20 15.5 20 10C20 4.5 15.5 0 10 0ZM10 18C5.6 18 2 14.4 2 10C2 5.6 5.6 2 10 2C14.4 2 18 5.6 18 10C18 14.4 14.4 18 10 18Z\" fill=\"black\"/>\r\n                <path d=\"M10.1 5.3C9 5.3 8 5.5 7 6.1L7.7 7.5C8.5 7.1 9.3 6.9 9.9 6.9C10.3 6.9 10.6 7 10.8 7.1C11 7.2 11.1 7.5 11.1 7.7C11.1 7.9 11 8.2 10.9 8.4C10.8 8.6 10.5 8.9 10 9.2C9.5 9.5 9.3 9.9 9.2 10.2C9 10.5 9 10.8 9 11.3V12H10V11.4C10 11.1 10.3 10.9 10.4 10.8C10.5 10.7 10.9 10.4 11.3 10.1C11.9 9.7 12.4 9.3 12.6 8.9C12.8 8.5 13 8.1 13 7.6C13 6.9 12.8 6.3 12.2 5.9C11.7 5.5 11 5.3 10.1 5.3Z\" fill=\"black\"/>\r\n                <path d=\"M9.7 12.9C9.3 12.9 9.1 13 8.9 13.2C8.7 13.4 8.6 13.7 8.6 14C8.6 14.4 8.7 14.6 8.9 14.8C9.1 15 9.4 15.1 9.7 15.1C10.1 15.1 10.3 15 10.5 14.8C10.7 14.6 10.8 14.3 10.8 14C10.8 13.7 10.7 13.4 10.5 13.2C10.3 13 10.1 12.9 9.7 12.9Z\" fill=\"black\"/>\r\n            </svg>\r\n        </div>\r\n    </div>\r\n    `,\r\n})"
            },
            {
                "name": "ToolTipStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tooltip/src/lib/tooltipBinding.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args: any) => ({\r\n    props: args,\r\n    template: `\r\n        <sol-tooltipWrapper [arrow]=\"arrow\" [darkMode]=\"darkMode\" [trigger]=\"trigger\" [interactive]=\"interactive\"></sol-tooltipWrapper>\r\n    `,\r\n})"
            },
            {
                "name": "ToolTipStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tooltip/src/lib/tooltipWithFunction.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args: any) => ({\r\n    props: args,\r\n    template: `\r\n        <div style=\"width:100%;height:100px;display:flex; justify-content:center;align-items:center;gap:25px;\">\r\n            <div>\r\n                <lib-button [variant]=\"'primary'\" [size]=\"'large'\" #tooltip1=\"solTooltip\" solTooltip [trigger]=\"trigger\" [position]=\"'bottom'\" [ariaDescribedBy]=\"'Forms tooltip'\" [interactive]=\"interactive\" [darkMode]=\"darkMode\" [closeOnOutsideClick]=\"false\" [content]=\"'This is a tooltip <br> Tooltips are used to describe or identify an element. In most scenarios, tooltips help the user understand the meaning, function or alt-text of an element.'\" [arrow]=\"arrow\">test</lib-button>\r\n            </div>\r\n            <button (click)=\"tooltip1.show()\">show</button>\r\n            <button (click)=\"tooltip1.hide()\">hide</button>\r\n            <button (click)=\"tooltip1.toggle()\">toggle</button>\r\n        </div>\r\n        <div style=\"width:100%;height:100px;display:flex; justify-content:center;align-items:center;gap:25px;\">\r\n            <div>\r\n                <lib-button [variant]=\"'primary'\" [size]=\"'large'\" #tooltip2=\"solTooltip\" solTooltip [trigger]=\"trigger\" [position]=\"'bottom'\" [ariaDescribedBy]=\"'Forms tooltip'\" [interactive]=\"interactive\" [darkMode]=\"darkMode\" [closeOnOutsideClick]=\"false\" [content]=\"'This is a tooltip <br> Tooltips are used to describe or identify an element. In most scenarios, tooltips help the user understand the meaning, function or alt-text of an element.'\" [arrow]=\"arrow\">test</lib-button>\r\n            </div>\r\n            <button (click)=\"tooltip2.show()\">show</button>\r\n            <button (click)=\"tooltip2.hide()\">hide</button>\r\n            <button (click)=\"tooltip2.toggle()\">toggle</button>\r\n        </div>\r\n        <div style=\"width:100%;height:100px;display:flex; justify-content:center;align-items:center;gap:25px;\">\r\n            <div>\r\n                <lib-button [variant]=\"'primary'\" [size]=\"'large'\" #tooltip3=\"solTooltip\" solTooltip [trigger]=\"trigger\" [position]=\"'bottom'\" [ariaDescribedBy]=\"'Forms tooltip'\" [interactive]=\"interactive\" [darkMode]=\"darkMode\" [closeOnOutsideClick]=\"false\" [content]=\"'This is a tooltip <br> Tooltips are used to describe or identify an element. In most scenarios, tooltips help the user understand the meaning, function or alt-text of an element.'\" [arrow]=\"arrow\">test</lib-button>\r\n            </div>\r\n            <button (click)=\"tooltip3.show()\">show</button>\r\n            <button (click)=\"tooltip3.hide()\">hide</button>\r\n            <button (click)=\"tooltip3.toggle()\">toggle</button>\r\n        </div>\r\n    `,\r\n})"
            },
            {
                "name": "tooltipWithBinding",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tooltip/src/lib/tooltipBinding.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ToolTipStory.bind({})"
            },
            {
                "name": "tooltipWithFunction",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/tooltip/src/lib/tooltipWithFunction.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ToolTipStory.bind({})"
            },
            {
                "name": "TrailingIconBasic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/button/src/lib/buttonTrailingIcon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ButtonStory.bind({})"
            },
            {
                "name": "TrailingIconDisabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/button/src/lib/buttonTrailingIcon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ButtonStory.bind({})"
            },
            {
                "name": "TrailingIconPrimary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/button/src/lib/buttonTrailingIcon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ButtonStory.bind({})"
            },
            {
                "name": "TrailingIconText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/button/src/lib/buttonTrailingIcon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ButtonStory.bind({})"
            },
            {
                "name": "TrailingIconWarn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/button/src/lib/buttonTrailingIcon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ButtonStory.bind({})"
            },
            {
                "name": "Warn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/button/src/lib/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ButtonStory.bind({})"
            },
            {
                "name": "Warning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/modal/src/lib/modal.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [
            {
                "name": "Variant",
                "childs": [
                    {
                        "name": "primary",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "btn-primary"
                    },
                    {
                        "name": "basic",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "btn-basic"
                    },
                    {
                        "name": "text",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "btn-text"
                    },
                    {
                        "name": "warn",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "btn-warn"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/button/src/lib/enum/variant.enum.ts"
            }
        ],
        "groupedVariables": {
            "projects/accordion/src/lib/accordion.stories.ts": [
                {
                    "name": "AccordionStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/accordion/src/lib/accordion.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<AccordionComponent>",
                    "defaultValue": "(args: AccordionComponent) => ({\r\n    props: args,\r\n    template: `\r\n    <ng-template #titleTemplate>\r\n        <svg viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M12.8 16H3.2C1.44 16 0 14.56 0 12.8V10.4H11.2V12.8C11.2 13.68 11.92 14.4 12.8 14.4C13.68 14.4 14.4 13.68 14.4 12.8V1.6H3.2V8.8H1.6V0H16V12.8C16 14.56 14.56 16 12.8 16ZM1.6 12V12.8C1.6 13.68 2.32 14.4 3.2 14.4H10C9.76 13.92 9.6 13.36 9.6 12.8V12H1.6Z\" fill=\"currentColor\" />\r\n            <path d=\"M4.8 3.2H6.4V4.8H4.8V3.2Z\" fill=\"currentColor\" />\r\n            <path d=\"M8 3.2H12.8V4.8H8V3.2Z\" fill=\"currentColor\" />\r\n            <path d=\"M4.8 6.4H6.4V8H4.8V6.4Z\" fill=\"currentColor\" />\r\n            <path d=\"M8 6.4H12.8V8H8V6.4Z\" fill=\"currentColor\" />\r\n        </svg>\r\n        Details\r\n    </ng-template>\r\n    <sol-accordion [multi]=\"multi\">\r\n        <sol-accordion-tab [titleTemplate]=\"titleTemplate\" [disabled]=\"true\">\r\n            <p>This is the primary content of the panel.</p>\r\n        </sol-accordion-tab>\r\n        <sol-accordion-tab [title]=\"'Accordion 2'\" [expanded]=\"true\">\r\n            <h2>HTML Forms</h2>\r\n            <form>\r\n                <label for=\"fname\">First name:</label><br>\r\n                <input type=\"text\" id=\"fname\" name=\"fname\" value=\"John\"><br>\r\n                <label for=\"lname\">Last name:</label><br>\r\n                <input type=\"text\" id=\"lname\" name=\"lname\" value=\"Doe\"><br><br>\r\n                <input type=\"button\" value=\"Submit\">\r\n            </form> \r\n        </sol-accordion-tab>\r\n        <sol-accordion-tab [title]=\"'Accordion 3'\">\r\n            <p>This is the secondary content of the panel.</p>\r\n        </sol-accordion-tab>\r\n        <sol-accordion-tab [title]=\"'Accordion 4'\">\r\n            <p>This is the tertary content of the panel.</p>\r\n        </sol-accordion-tab>\r\n    </sol-accordion>\r\n    `,\r\n})"
                },
                {
                    "name": "Multi",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/accordion/src/lib/accordion.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "AccordionStory.bind({})"
                },
                {
                    "name": "Single",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/accordion/src/lib/accordion.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "AccordionStory.bind({})"
                }
            ],
            "projects/modal/src/lib/modal.stories.ts": [
                {
                    "name": "Alert",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/modal/src/lib/modal.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Information",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/modal/src/lib/modal.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Standard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/modal/src/lib/modal.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/modal/src/lib/modal.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<LaunchDialogComponent>",
                    "defaultValue": "(args: LaunchDialogComponent) => ({\r\n    props: args,\r\n    template: `<launch-dialog [modalType]=\"modalType\"></launch-dialog>`\r\n  })"
                },
                {
                    "name": "Warning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/modal/src/lib/modal.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "projects/button/src/lib/button.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/button/src/lib/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ButtonStory.bind({})"
                },
                {
                    "name": "ButtonStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/button/src/lib/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonComponent>",
                    "defaultValue": "(args: ButtonComponent) => ({\r\n    props: args,\r\n    template: `\r\n    <div style=\"display: flex; border: grey 1px solid; padding: 24px; align-items: center; column-gap: 10px;\">\r\n    <lib-button [variant]=\"variant\" [size]=\"'large'\" [disabled]=\"disabled\">Button Text</lib-button>\r\n    <lib-button [variant]=\"variant\" [size]=\"'medium'\" [aria-label]=\"'Button Aria Label'\" [disabled]=\"disabled\">Button Text</lib-button>\r\n    <lib-button [variant]=\"variant\" [size]=\"'small'\" [aria-label]=\"'Button Aria Label'\" [disabled]=\"disabled\">Button Text</lib-button>\r\n    </div>\r\n    `,\r\n})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/button/src/lib/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ButtonStory.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/button/src/lib/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ButtonStory.bind({})"
                },
                {
                    "name": "Text",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/button/src/lib/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ButtonStory.bind({})"
                },
                {
                    "name": "Warn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/button/src/lib/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ButtonStory.bind({})"
                }
            ],
            "projects/button/src/lib/buttonDualIcon.stories.ts": [
                {
                    "name": "ButtonStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/button/src/lib/buttonDualIcon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonComponent>",
                    "defaultValue": "(args: ButtonComponent) => ({\r\n    props: args,\r\n    template: `\r\n    <ng-template #LeadingIcon>\r\n        <svg style=\"margin-right: 9.6px;\" width=\"8\" height=\"14\" viewBox=\"0 0 8 14\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M0.98112 6.20396L6.1132 0.79102C6.3547 0.536294 6.77735 0.536294 7.01886 0.79102C7.26037 1.04575 7.26037 1.49152 7.01886 1.74624L2.18867 6.84077L7.01886 12.2537C7.26037 12.5084 7.26037 12.9542 7.01886 13.2089C6.77735 13.4637 6.3547 13.4637 6.1132 13.2089L0.98112 7.47759C0.799988 7.28654 0.799988 7.0955 0.799988 6.90445C0.799988 6.58604 0.860365 6.33132 0.98112 6.20396Z\" fill=\"currentColor\"/>\r\n        </svg>\r\n    </ng-template>\r\n    <ng-template #TrailingIcon>\r\n        <svg style=\"margin-left: 9.6px;\" width=\"8\" height=\"14\" viewBox=\"0 0 8 14\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M7.01886 6.20396L1.88678 0.79102C1.64527 0.536294 1.22263 0.536294 0.98112 0.79102C0.73961 1.04575 0.73961 1.49152 0.98112 1.74624L5.81131 6.84077L0.98112 12.2537C0.73961 12.5084 0.73961 12.9542 0.98112 13.2089C1.22263 13.4637 1.64527 13.4637 1.88678 13.2089L7.01886 7.47759C7.19999 7.28654 7.19999 7.0955 7.19999 6.90445C7.19999 6.58604 7.13961 6.33132 7.01886 6.20396Z\" fill=\"currentColor\"/>\r\n        </svg>\r\n    </ng-template>\r\n    <div style=\"display: flex; border: grey 1px solid; padding: 24px; align-items: center; column-gap: 10px;\">\r\n    <lib-button [variant]=\"variant\" [size]=\"'large'\" [aria-label]=\"'Button Aria Label'\" [disabled]=\"disabled\" [IconPositionedFront]=\"LeadingIcon\" [IconPositionedEnd]=\"TrailingIcon\">Button Text</lib-button>\r\n    <lib-button [variant]=\"variant\" [size]=\"'medium'\" [aria-label]=\"'Button Aria Label'\" [disabled]=\"disabled\" [IconPositionedFront]=\"LeadingIcon\" [IconPositionedEnd]=\"TrailingIcon\">Button Text</lib-button>\r\n    <lib-button [variant]=\"variant\" [size]=\"'small'\" [aria-label]=\"'Button Aria Label'\" [disabled]=\"disabled\" [IconPositionedFront]=\"LeadingIcon\" [IconPositionedEnd]=\"TrailingIcon\">Button Text</lib-button>\r\n    </div>\r\n    `\r\n})"
                },
                {
                    "name": "DualIconBasic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/button/src/lib/buttonDualIcon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ButtonStory.bind({})"
                },
                {
                    "name": "DualIconDisabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/button/src/lib/buttonDualIcon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ButtonStory.bind({})"
                },
                {
                    "name": "DualIconPrimary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/button/src/lib/buttonDualIcon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ButtonStory.bind({})"
                },
                {
                    "name": "DualIconText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/button/src/lib/buttonDualIcon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ButtonStory.bind({})"
                },
                {
                    "name": "DualIconWarn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/button/src/lib/buttonDualIcon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ButtonStory.bind({})"
                }
            ],
            "projects/button/src/lib/buttonLeadingIcon.stories.ts": [
                {
                    "name": "ButtonStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/button/src/lib/buttonLeadingIcon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonComponent>",
                    "defaultValue": "(args: ButtonComponent) => ({\r\n    props: args,\r\n    template: `\r\n    <ng-template #LeadingAddIcon>\r\n        <svg style=\"margin-right: 9.6px;\" width=\"13\" height=\"13\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M18 9H11V2H9V9H2V11H9V18H11V11H18V9Z\" fill=\"currentColor\" />\r\n        </svg>\r\n    </ng-template>\r\n    <div style=\"display: flex; border: grey 1px solid; padding: 24px; align-items: center; column-gap: 10px;\">\r\n    <lib-button [variant]=\"variant\" [size]=\"'large'\" [aria-label]=\"'Button Aria Label'\" [disabled]=\"disabled\" [IconPositionedFront]=\"LeadingAddIcon\" >Button Text</lib-button>\r\n    <lib-button [variant]=\"variant\" [size]=\"'medium'\" [aria-label]=\"'Button Aria Label'\" [disabled]=\"disabled\" [IconPositionedFront]=\"LeadingAddIcon\">Button Text</lib-button>\r\n    <lib-button [variant]=\"variant\" [size]=\"'small'\" [aria-label]=\"'Button Aria Label'\" [disabled]=\"disabled\" [IconPositionedFront]=\"LeadingAddIcon\">Button Text</lib-button>\r\n    </div>\r\n    `\r\n})"
                },
                {
                    "name": "LeadingIconBasic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/button/src/lib/buttonLeadingIcon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ButtonStory.bind({})"
                },
                {
                    "name": "LeadingIconDisabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/button/src/lib/buttonLeadingIcon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ButtonStory.bind({})"
                },
                {
                    "name": "LeadingIconPrimary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/button/src/lib/buttonLeadingIcon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ButtonStory.bind({})"
                },
                {
                    "name": "LeadingIconText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/button/src/lib/buttonLeadingIcon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ButtonStory.bind({})"
                },
                {
                    "name": "LeadingIconWarn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/button/src/lib/buttonLeadingIcon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ButtonStory.bind({})"
                }
            ],
            "projects/button/src/lib/buttonTrailingIcon.stories.ts": [
                {
                    "name": "ButtonStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/button/src/lib/buttonTrailingIcon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonComponent>",
                    "defaultValue": "(args: ButtonComponent) => ({\r\n    props: args,\r\n    template: `\r\n    <ng-template #trailingAddIcon>\r\n        <svg style=\"margin-left: 9.6px\" width=\"13\" height=\"13\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M18 9H11V2H9V9H2V11H9V18H11V11H18V9Z\" fill=\"currentColor\" />\r\n        </svg>\r\n    </ng-template>\r\n    <div style=\"display: flex; border: grey 1px solid; padding: 24px; align-items: center; column-gap: 10px;\">\r\n    <lib-button [variant]=\"variant\" [size]=\"'large'\" [aria-label]=\"'Button Aria Label'\" [disabled]=\"disabled\" [IconPositionedEnd]=\"trailingAddIcon\">Button Text</lib-button>\r\n    <lib-button [variant]=\"variant\" [size]=\"'medium'\" [aria-label]=\"'Button Aria Label'\" [disabled]=\"disabled\" [IconPositionedEnd]=\"trailingAddIcon\">Button Text</lib-button>\r\n    <lib-button [variant]=\"variant\" [size]=\"'small'\" [aria-label]=\"'Button Aria Label'\" [disabled]=\"disabled\" [IconPositionedEnd]=\"trailingAddIcon\">Button Text</lib-button>\r\n    </div>\r\n    `\r\n})"
                },
                {
                    "name": "TrailingIconBasic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/button/src/lib/buttonTrailingIcon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ButtonStory.bind({})"
                },
                {
                    "name": "TrailingIconDisabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/button/src/lib/buttonTrailingIcon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ButtonStory.bind({})"
                },
                {
                    "name": "TrailingIconPrimary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/button/src/lib/buttonTrailingIcon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ButtonStory.bind({})"
                },
                {
                    "name": "TrailingIconText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/button/src/lib/buttonTrailingIcon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ButtonStory.bind({})"
                },
                {
                    "name": "TrailingIconWarn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/button/src/lib/buttonTrailingIcon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ButtonStory.bind({})"
                }
            ],
            "projects/accordion/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/accordion/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/accordion/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/tabs/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tabs/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tabs/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/button/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/button/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/button/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/tabs/src/lib/tabs.stories.ts": [
                {
                    "name": "PrimaryExtraLarge",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tabs/src/lib/tabs.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TabStory.bind({})"
                },
                {
                    "name": "PrimaryLarge",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tabs/src/lib/tabs.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TabStory.bind({})"
                },
                {
                    "name": "TabStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tabs/src/lib/tabs.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TabsComponent>",
                    "defaultValue": "(args: TabsComponent) => ({\r\n    props: args,\r\n    template: `\r\n    <sol-tabs [variant]=\"variant\" [size]=\"size\">\r\n        <sol-tab [title]=\"'Details'\">Content A - Loaded</sol-tab> \r\n        <sol-tab [title]=\"'Users'\" >Content B - Loaded</sol-tab>\r\n        <sol-tab [title]=\"'History'\" [isActive]=\"true\">Content C - Loaded</sol-tab>\r\n    </sol-tabs>\r\n    `,\r\n})"
                },
                {
                    "name": "TextExtraLarge",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tabs/src/lib/tabs.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TabStory.bind({})"
                },
                {
                    "name": "TextLarge",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tabs/src/lib/tabs.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TabStory.bind({})"
                }
            ],
            "projects/tabs/src/lib/tabsIconOnly.stories.ts": [
                {
                    "name": "PrimaryExtraLargeIconOnly",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tabs/src/lib/tabsIconOnly.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TabStory.bind({})"
                },
                {
                    "name": "PrimaryLargeIconOnly",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tabs/src/lib/tabsIconOnly.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TabStory.bind({})"
                },
                {
                    "name": "TabStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tabs/src/lib/tabsIconOnly.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TabsComponent>",
                    "defaultValue": "(args: TabsComponent) => ({\r\n    props: args,\r\n    template: `\r\n    <ng-template #titleTemplate1>\r\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M12.8 16H3.2C1.44 16 0 14.56 0 12.8V10.4H11.2V12.8C11.2 13.68 11.92 14.4 12.8 14.4C13.68 14.4 14.4 13.68 14.4 12.8V1.6H3.2V8.8H1.6V0H16V12.8C16 14.56 14.56 16 12.8 16ZM1.6 12V12.8C1.6 13.68 2.32 14.4 3.2 14.4H10C9.76 13.92 9.6 13.36 9.6 12.8V12H1.6Z\" fill=\"currentColor\" />\r\n            <path d=\"M4.8 3.2H6.4V4.8H4.8V3.2Z\" fill=\"currentColor\" />\r\n            <path d=\"M8 3.2H12.8V4.8H8V3.2Z\" fill=\"currentColor\" />\r\n            <path d=\"M4.8 6.4H6.4V8H4.8V6.4Z\" fill=\"currentColor\" />\r\n            <path d=\"M8 6.4H12.8V8H8V6.4Z\" fill=\"currentColor\" />\r\n        </svg>\r\n    </ng-template>\r\n        <ng-template #titleTemplate2>\r\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M8.00005 1.6C8.99579 1.6 9.91494 2 10.5277 2.72C11.1405 3.44 11.5235 4.4 11.5235 5.36C11.5235 6.08 11.3703 6.8 10.9873 7.36C10.8341 7.52 10.7575 7.76 10.6043 7.92L9.37877 9.36L10.9107 10.32C11.4469 10.64 11.983 11.12 12.4426 11.76C13.0554 12.64 13.5149 13.6 13.5915 14.4H2.10218C2.17877 13.6 2.79154 12.56 3.4043 11.76C3.86388 11.2 4.32345 10.72 4.93622 10.32L6.46813 9.36L5.3192 7.92C5.16601 7.76 5.08941 7.6 4.93622 7.44C4.62984 6.8 4.40005 6.08 4.40005 5.36C4.40005 4.4 4.78303 3.44 5.39579 2.72C6.08516 2 7.0043 1.6 8.00005 1.6ZM8.00005 0C6.54473 0 5.3192 0.56 4.32345 1.6C3.4043 2.64 2.86813 4 2.86813 5.36C2.86813 6.4 3.09792 7.36 3.63409 8.24C3.78728 8.48 3.94047 8.72 4.17026 8.96C3.4809 9.44 2.79154 10 2.25537 10.72C1.33622 11.92 0.800049 13.44 0.800049 14.64C0.800049 15.44 1.41281 16 2.25537 16H13.7447C14.5107 16 15.2 15.36 15.2 14.64C15.2 13.44 14.6639 12 13.7447 10.8C13.2086 10.08 12.5192 9.44 11.8298 9.04C11.983 8.8 12.2128 8.56 12.366 8.32C12.9022 7.44 13.132 6.48 13.132 5.44C13.0554 4 12.5192 2.64 11.6 1.6C10.6809 0.56 9.37877 0 8.00005 0V0Z\" fill=\"currentColor\"/>\r\n            </svg> \r\n        </ng-template>\r\n        <ng-template #titleTemplate3>\r\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M8.55997 0.800049C7.03997 0.800049 5.51997 1.29096 4.31997 2.27278C3.27997 3.09096 2.39997 4.31823 1.99997 5.5455L1.67997 4.97278C1.51997 4.80914 1.43997 4.72732 1.27997 4.6455C1.19997 4.6455 1.11997 4.6455 1.11997 4.6455C1.03997 4.6455 0.87997 4.6455 0.79997 4.72732C0.39997 4.89096 0.31997 5.30005 0.47997 5.62732L1.59997 7.67278C1.67997 7.83641 1.75997 7.91823 1.91997 8.00005C2.07997 8.08187 2.23997 8.00005 2.39997 7.91823L4.39997 6.77278C4.63997 6.77278 4.71997 6.60914 4.79997 6.4455C4.79997 6.28187 4.79997 6.03641 4.71997 5.87278C4.63997 5.70914 4.47997 5.62732 4.31997 5.5455C4.15997 5.5455 3.99997 5.5455 3.83997 5.62732L3.19997 5.95459C3.99997 3.66369 6.15997 2.19096 8.55997 2.19096C11.68 2.19096 14.24 4.80914 14.24 8.00005C14.24 11.191 11.68 13.8091 8.55997 13.8091C7.03997 13.8091 5.59997 13.2364 4.55997 12.091C4.31997 11.8455 3.91997 11.8455 3.59997 12.091C3.35997 12.3364 3.35997 12.8273 3.59997 13.0728C4.95997 14.4637 6.71997 15.2 8.55997 15.2C12.4 15.2 15.6 12.0091 15.6 8.00005C15.6 3.99096 12.48 0.800049 8.55997 0.800049Z\" fill=\"currentColor\"/>\r\n                <path d=\"M8.15997 4.56369C7.83997 4.56369 7.51997 4.89096 7.51997 5.21823V8.81823C7.51997 9.1455 7.83997 9.47278 8.15997 9.47278H11.12C11.44 9.47278 11.76 9.1455 11.76 8.81823C11.76 8.49096 11.44 8.16369 11.12 8.16369H8.79997V5.21823C8.79997 4.89096 8.47997 4.56369 8.15997 4.56369Z\" fill=\"currentColor\"/>\r\n            </svg>\r\n        </ng-template>\r\n    <sol-tabs [variant]=\"variant\" [size]=\"size\">\r\n        <sol-tab [titleTemplate]=\"titleTemplate1\">Content A - Loaded</sol-tab> \r\n        <sol-tab [titleTemplate]=\"titleTemplate2\" >Content B - Loaded</sol-tab>\r\n        <sol-tab [titleTemplate]=\"titleTemplate3\" [isActive]=\"true\">Content C - Loaded</sol-tab>\r\n    </sol-tabs>\r\n    `,\r\n})"
                },
                {
                    "name": "TextExtraLargeIconOnly",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tabs/src/lib/tabsIconOnly.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TabStory.bind({})"
                },
                {
                    "name": "TextLargeIconOnly",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tabs/src/lib/tabsIconOnly.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TabStory.bind({})"
                }
            ],
            "projects/tabs/src/lib/tabsIconText.stories.ts": [
                {
                    "name": "PrimaryExtraLargeIconText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tabs/src/lib/tabsIconText.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TabStory.bind({})"
                },
                {
                    "name": "PrimaryLargeIconText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tabs/src/lib/tabsIconText.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TabStory.bind({})"
                },
                {
                    "name": "TabStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tabs/src/lib/tabsIconText.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TabsComponent>",
                    "defaultValue": "(args: TabsComponent) => ({\r\n    props: args,\r\n    template: `\r\n    <ng-template #titleTemplate1>\r\n        <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M12.8 16H3.2C1.44 16 0 14.56 0 12.8V10.4H11.2V12.8C11.2 13.68 11.92 14.4 12.8 14.4C13.68 14.4 14.4 13.68 14.4 12.8V1.6H3.2V8.8H1.6V0H16V12.8C16 14.56 14.56 16 12.8 16ZM1.6 12V12.8C1.6 13.68 2.32 14.4 3.2 14.4H10C9.76 13.92 9.6 13.36 9.6 12.8V12H1.6Z\" fill=\"currentColor\" />\r\n            <path d=\"M4.8 3.2H6.4V4.8H4.8V3.2Z\" fill=\"currentColor\" />\r\n            <path d=\"M8 3.2H12.8V4.8H8V3.2Z\" fill=\"currentColor\" />\r\n            <path d=\"M4.8 6.4H6.4V8H4.8V6.4Z\" fill=\"currentColor\" />\r\n            <path d=\"M8 6.4H12.8V8H8V6.4Z\" fill=\"currentColor\" />\r\n        </svg>\r\n        Details\r\n    </ng-template>\r\n        <ng-template #titleTemplate2>\r\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M8.00005 1.6C8.99579 1.6 9.91494 2 10.5277 2.72C11.1405 3.44 11.5235 4.4 11.5235 5.36C11.5235 6.08 11.3703 6.8 10.9873 7.36C10.8341 7.52 10.7575 7.76 10.6043 7.92L9.37877 9.36L10.9107 10.32C11.4469 10.64 11.983 11.12 12.4426 11.76C13.0554 12.64 13.5149 13.6 13.5915 14.4H2.10218C2.17877 13.6 2.79154 12.56 3.4043 11.76C3.86388 11.2 4.32345 10.72 4.93622 10.32L6.46813 9.36L5.3192 7.92C5.16601 7.76 5.08941 7.6 4.93622 7.44C4.62984 6.8 4.40005 6.08 4.40005 5.36C4.40005 4.4 4.78303 3.44 5.39579 2.72C6.08516 2 7.0043 1.6 8.00005 1.6ZM8.00005 0C6.54473 0 5.3192 0.56 4.32345 1.6C3.4043 2.64 2.86813 4 2.86813 5.36C2.86813 6.4 3.09792 7.36 3.63409 8.24C3.78728 8.48 3.94047 8.72 4.17026 8.96C3.4809 9.44 2.79154 10 2.25537 10.72C1.33622 11.92 0.800049 13.44 0.800049 14.64C0.800049 15.44 1.41281 16 2.25537 16H13.7447C14.5107 16 15.2 15.36 15.2 14.64C15.2 13.44 14.6639 12 13.7447 10.8C13.2086 10.08 12.5192 9.44 11.8298 9.04C11.983 8.8 12.2128 8.56 12.366 8.32C12.9022 7.44 13.132 6.48 13.132 5.44C13.0554 4 12.5192 2.64 11.6 1.6C10.6809 0.56 9.37877 0 8.00005 0V0Z\" fill=\"currentColor\"/>\r\n            </svg>            \r\n            Users\r\n        </ng-template>\r\n        <ng-template #titleTemplate3>\r\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M8.55997 0.800049C7.03997 0.800049 5.51997 1.29096 4.31997 2.27278C3.27997 3.09096 2.39997 4.31823 1.99997 5.5455L1.67997 4.97278C1.51997 4.80914 1.43997 4.72732 1.27997 4.6455C1.19997 4.6455 1.11997 4.6455 1.11997 4.6455C1.03997 4.6455 0.87997 4.6455 0.79997 4.72732C0.39997 4.89096 0.31997 5.30005 0.47997 5.62732L1.59997 7.67278C1.67997 7.83641 1.75997 7.91823 1.91997 8.00005C2.07997 8.08187 2.23997 8.00005 2.39997 7.91823L4.39997 6.77278C4.63997 6.77278 4.71997 6.60914 4.79997 6.4455C4.79997 6.28187 4.79997 6.03641 4.71997 5.87278C4.63997 5.70914 4.47997 5.62732 4.31997 5.5455C4.15997 5.5455 3.99997 5.5455 3.83997 5.62732L3.19997 5.95459C3.99997 3.66369 6.15997 2.19096 8.55997 2.19096C11.68 2.19096 14.24 4.80914 14.24 8.00005C14.24 11.191 11.68 13.8091 8.55997 13.8091C7.03997 13.8091 5.59997 13.2364 4.55997 12.091C4.31997 11.8455 3.91997 11.8455 3.59997 12.091C3.35997 12.3364 3.35997 12.8273 3.59997 13.0728C4.95997 14.4637 6.71997 15.2 8.55997 15.2C12.4 15.2 15.6 12.0091 15.6 8.00005C15.6 3.99096 12.48 0.800049 8.55997 0.800049Z\" fill=\"currentColor\"/>\r\n                <path d=\"M8.15997 4.56369C7.83997 4.56369 7.51997 4.89096 7.51997 5.21823V8.81823C7.51997 9.1455 7.83997 9.47278 8.15997 9.47278H11.12C11.44 9.47278 11.76 9.1455 11.76 8.81823C11.76 8.49096 11.44 8.16369 11.12 8.16369H8.79997V5.21823C8.79997 4.89096 8.47997 4.56369 8.15997 4.56369Z\" fill=\"currentColor\"/>\r\n            </svg>            \r\n            History\r\n        </ng-template>\r\n    <sol-tabs [variant]=\"variant\" [size]=\"size\">\r\n        <sol-tab [titleTemplate]=\"titleTemplate1\">Content A - Loaded</sol-tab> \r\n        <sol-tab [titleTemplate]=\"titleTemplate2\" >Content B - Loaded</sol-tab>\r\n        <sol-tab [titleTemplate]=\"titleTemplate3\" [isActive]=\"true\">Content C - Loaded</sol-tab>\r\n    </sol-tabs>\r\n    `,\r\n})"
                },
                {
                    "name": "TextExtraLargeIconText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tabs/src/lib/tabsIconText.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TabStory.bind({})"
                },
                {
                    "name": "TextLargeIconText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tabs/src/lib/tabsIconText.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TabStory.bind({})"
                }
            ],
            "projects/tooltip/src/lib/tooltip.stories.ts": [
                {
                    "name": "tooltipArrowDark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tooltip/src/lib/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ToolTipStory.bind({})"
                },
                {
                    "name": "tooltipArrowDarkOnClick",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tooltip/src/lib/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ToolTipStory.bind({})"
                },
                {
                    "name": "tooltipArrowDarkOnClickInteractive",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tooltip/src/lib/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ToolTipStory.bind({})"
                },
                {
                    "name": "tooltipArrowLight",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tooltip/src/lib/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ToolTipStory.bind({})"
                },
                {
                    "name": "tooltipArrowLightOnClick",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tooltip/src/lib/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ToolTipStory.bind({})"
                },
                {
                    "name": "tooltipDark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tooltip/src/lib/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ToolTipStory.bind({})"
                },
                {
                    "name": "tooltipDarkInteractive",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tooltip/src/lib/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ToolTipStory.bind({})"
                },
                {
                    "name": "tooltipDarkOnClick",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tooltip/src/lib/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ToolTipStory.bind({})"
                },
                {
                    "name": "tooltipLight",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tooltip/src/lib/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ToolTipStory.bind({})"
                },
                {
                    "name": "tooltipLightOnClick",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tooltip/src/lib/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ToolTipStory.bind({})"
                },
                {
                    "name": "ToolTipStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tooltip/src/lib/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TooltipDirective>",
                    "defaultValue": "(args: TooltipDirective) => ({\r\n    props: args,\r\n    template: `\r\n    <div style=\"width:100%;height:300px;display:flex; justify-content:center;align-items:center;gap:25px;\">\r\n        <div>\r\n            <svg solTooltip [trigger]=\"trigger\" [position]=\"'top'\" [ariaDescribedBy]=\"'Tooltip top example'\" [interactive]=\"interactive\" [darkMode]=\"darkMode\" [content]=\"'This is a tooltip <br> Tooltips are used to describe or identify an element. In most scenarios, tooltips help the user understand the meaning, function or alt-text of an element.'\" [arrow]=\"arrow\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M10 0C4.5 0 0 4.5 0 10C0 15.5 4.5 20 10 20C15.5 20 20 15.5 20 10C20 4.5 15.5 0 10 0ZM10 18C5.6 18 2 14.4 2 10C2 5.6 5.6 2 10 2C14.4 2 18 5.6 18 10C18 14.4 14.4 18 10 18Z\" fill=\"black\"/>\r\n                <path d=\"M10.1 5.3C9 5.3 8 5.5 7 6.1L7.7 7.5C8.5 7.1 9.3 6.9 9.9 6.9C10.3 6.9 10.6 7 10.8 7.1C11 7.2 11.1 7.5 11.1 7.7C11.1 7.9 11 8.2 10.9 8.4C10.8 8.6 10.5 8.9 10 9.2C9.5 9.5 9.3 9.9 9.2 10.2C9 10.5 9 10.8 9 11.3V12H10V11.4C10 11.1 10.3 10.9 10.4 10.8C10.5 10.7 10.9 10.4 11.3 10.1C11.9 9.7 12.4 9.3 12.6 8.9C12.8 8.5 13 8.1 13 7.6C13 6.9 12.8 6.3 12.2 5.9C11.7 5.5 11 5.3 10.1 5.3Z\" fill=\"black\"/>\r\n                <path d=\"M9.7 12.9C9.3 12.9 9.1 13 8.9 13.2C8.7 13.4 8.6 13.7 8.6 14C8.6 14.4 8.7 14.6 8.9 14.8C9.1 15 9.4 15.1 9.7 15.1C10.1 15.1 10.3 15 10.5 14.8C10.7 14.6 10.8 14.3 10.8 14C10.8 13.7 10.7 13.4 10.5 13.2C10.3 13 10.1 12.9 9.7 12.9Z\" fill=\"black\"/>\r\n            </svg>\r\n        </div>\r\n        <div>\r\n            <svg solTooltip [trigger]=\"trigger\" [position]=\"'top-start'\" [ariaDescribedBy]=\"'Tooltip top start example'\" [interactive]=\"interactive\" [darkMode]=\"darkMode\" [content]=\"'This is a tooltip <br> Tooltips are used to describe or identify an element. In most scenarios, tooltips help the user understand the meaning, function or alt-text of an element.'\" [arrow]=\"arrow\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M10 0C4.5 0 0 4.5 0 10C0 15.5 4.5 20 10 20C15.5 20 20 15.5 20 10C20 4.5 15.5 0 10 0ZM10 18C5.6 18 2 14.4 2 10C2 5.6 5.6 2 10 2C14.4 2 18 5.6 18 10C18 14.4 14.4 18 10 18Z\" fill=\"black\"/>\r\n                <path d=\"M10.1 5.3C9 5.3 8 5.5 7 6.1L7.7 7.5C8.5 7.1 9.3 6.9 9.9 6.9C10.3 6.9 10.6 7 10.8 7.1C11 7.2 11.1 7.5 11.1 7.7C11.1 7.9 11 8.2 10.9 8.4C10.8 8.6 10.5 8.9 10 9.2C9.5 9.5 9.3 9.9 9.2 10.2C9 10.5 9 10.8 9 11.3V12H10V11.4C10 11.1 10.3 10.9 10.4 10.8C10.5 10.7 10.9 10.4 11.3 10.1C11.9 9.7 12.4 9.3 12.6 8.9C12.8 8.5 13 8.1 13 7.6C13 6.9 12.8 6.3 12.2 5.9C11.7 5.5 11 5.3 10.1 5.3Z\" fill=\"black\"/>\r\n                <path d=\"M9.7 12.9C9.3 12.9 9.1 13 8.9 13.2C8.7 13.4 8.6 13.7 8.6 14C8.6 14.4 8.7 14.6 8.9 14.8C9.1 15 9.4 15.1 9.7 15.1C10.1 15.1 10.3 15 10.5 14.8C10.7 14.6 10.8 14.3 10.8 14C10.8 13.7 10.7 13.4 10.5 13.2C10.3 13 10.1 12.9 9.7 12.9Z\" fill=\"black\"/>\r\n            </svg>\r\n        </div>\r\n        <div>\r\n            <svg solTooltip [trigger]=\"trigger\" [position]=\"'top-end'\" [ariaDescribedBy]=\"'Tooltip top end example'\" [interactive]=\"interactive\" [darkMode]=\"darkMode\" [content]=\"'This is a tooltip <br> Tooltips are used to describe or identify an element. In most scenarios, tooltips help the user understand the meaning, function or alt-text of an element.'\" [arrow]=\"arrow\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M10 0C4.5 0 0 4.5 0 10C0 15.5 4.5 20 10 20C15.5 20 20 15.5 20 10C20 4.5 15.5 0 10 0ZM10 18C5.6 18 2 14.4 2 10C2 5.6 5.6 2 10 2C14.4 2 18 5.6 18 10C18 14.4 14.4 18 10 18Z\" fill=\"black\"/>\r\n                <path d=\"M10.1 5.3C9 5.3 8 5.5 7 6.1L7.7 7.5C8.5 7.1 9.3 6.9 9.9 6.9C10.3 6.9 10.6 7 10.8 7.1C11 7.2 11.1 7.5 11.1 7.7C11.1 7.9 11 8.2 10.9 8.4C10.8 8.6 10.5 8.9 10 9.2C9.5 9.5 9.3 9.9 9.2 10.2C9 10.5 9 10.8 9 11.3V12H10V11.4C10 11.1 10.3 10.9 10.4 10.8C10.5 10.7 10.9 10.4 11.3 10.1C11.9 9.7 12.4 9.3 12.6 8.9C12.8 8.5 13 8.1 13 7.6C13 6.9 12.8 6.3 12.2 5.9C11.7 5.5 11 5.3 10.1 5.3Z\" fill=\"black\"/>\r\n                <path d=\"M9.7 12.9C9.3 12.9 9.1 13 8.9 13.2C8.7 13.4 8.6 13.7 8.6 14C8.6 14.4 8.7 14.6 8.9 14.8C9.1 15 9.4 15.1 9.7 15.1C10.1 15.1 10.3 15 10.5 14.8C10.7 14.6 10.8 14.3 10.8 14C10.8 13.7 10.7 13.4 10.5 13.2C10.3 13 10.1 12.9 9.7 12.9Z\" fill=\"black\"/>\r\n            </svg>\r\n        </div>\r\n        <div>\r\n            <svg solTooltip [trigger]=\"trigger\" [position]=\"'bottom'\" [ariaDescribedBy]=\"'Tooltip bottom example'\" [interactive]=\"interactive\" [darkMode]=\"darkMode\" [content]=\"'This is a tooltip <br> Tooltips are used to describe or identify an element. In most scenarios, tooltips help the user understand the meaning, function or alt-text of an element.'\" [arrow]=\"arrow\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M10 0C4.5 0 0 4.5 0 10C0 15.5 4.5 20 10 20C15.5 20 20 15.5 20 10C20 4.5 15.5 0 10 0ZM10 18C5.6 18 2 14.4 2 10C2 5.6 5.6 2 10 2C14.4 2 18 5.6 18 10C18 14.4 14.4 18 10 18Z\" fill=\"black\"/>\r\n                <path d=\"M10.1 5.3C9 5.3 8 5.5 7 6.1L7.7 7.5C8.5 7.1 9.3 6.9 9.9 6.9C10.3 6.9 10.6 7 10.8 7.1C11 7.2 11.1 7.5 11.1 7.7C11.1 7.9 11 8.2 10.9 8.4C10.8 8.6 10.5 8.9 10 9.2C9.5 9.5 9.3 9.9 9.2 10.2C9 10.5 9 10.8 9 11.3V12H10V11.4C10 11.1 10.3 10.9 10.4 10.8C10.5 10.7 10.9 10.4 11.3 10.1C11.9 9.7 12.4 9.3 12.6 8.9C12.8 8.5 13 8.1 13 7.6C13 6.9 12.8 6.3 12.2 5.9C11.7 5.5 11 5.3 10.1 5.3Z\" fill=\"black\"/>\r\n                <path d=\"M9.7 12.9C9.3 12.9 9.1 13 8.9 13.2C8.7 13.4 8.6 13.7 8.6 14C8.6 14.4 8.7 14.6 8.9 14.8C9.1 15 9.4 15.1 9.7 15.1C10.1 15.1 10.3 15 10.5 14.8C10.7 14.6 10.8 14.3 10.8 14C10.8 13.7 10.7 13.4 10.5 13.2C10.3 13 10.1 12.9 9.7 12.9Z\" fill=\"black\"/>\r\n            </svg>\r\n        </div>\r\n        <div>\r\n            <svg solTooltip [trigger]=\"trigger\" [position]=\"'bottom-start'\" [ariaDescribedBy]=\"'Tooltip bottom start example'\" [interactive]=\"interactive\" [darkMode]=\"darkMode\" [content]=\"'This is a tooltip <br> Tooltips are used to describe or identify an element. In most scenarios, tooltips help the user understand the meaning, function or alt-text of an element.'\" [arrow]=\"arrow\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M10 0C4.5 0 0 4.5 0 10C0 15.5 4.5 20 10 20C15.5 20 20 15.5 20 10C20 4.5 15.5 0 10 0ZM10 18C5.6 18 2 14.4 2 10C2 5.6 5.6 2 10 2C14.4 2 18 5.6 18 10C18 14.4 14.4 18 10 18Z\" fill=\"black\"/>\r\n                <path d=\"M10.1 5.3C9 5.3 8 5.5 7 6.1L7.7 7.5C8.5 7.1 9.3 6.9 9.9 6.9C10.3 6.9 10.6 7 10.8 7.1C11 7.2 11.1 7.5 11.1 7.7C11.1 7.9 11 8.2 10.9 8.4C10.8 8.6 10.5 8.9 10 9.2C9.5 9.5 9.3 9.9 9.2 10.2C9 10.5 9 10.8 9 11.3V12H10V11.4C10 11.1 10.3 10.9 10.4 10.8C10.5 10.7 10.9 10.4 11.3 10.1C11.9 9.7 12.4 9.3 12.6 8.9C12.8 8.5 13 8.1 13 7.6C13 6.9 12.8 6.3 12.2 5.9C11.7 5.5 11 5.3 10.1 5.3Z\" fill=\"black\"/>\r\n                <path d=\"M9.7 12.9C9.3 12.9 9.1 13 8.9 13.2C8.7 13.4 8.6 13.7 8.6 14C8.6 14.4 8.7 14.6 8.9 14.8C9.1 15 9.4 15.1 9.7 15.1C10.1 15.1 10.3 15 10.5 14.8C10.7 14.6 10.8 14.3 10.8 14C10.8 13.7 10.7 13.4 10.5 13.2C10.3 13 10.1 12.9 9.7 12.9Z\" fill=\"black\"/>\r\n            </svg>\r\n        </div>\r\n        <div>\r\n            <svg solTooltip [trigger]=\"trigger\" [position]=\"'bottom-end'\" [ariaDescribedBy]=\"'Tooltip bottom end example'\" [interactive]=\"interactive\" [darkMode]=\"darkMode\" [content]=\"'This is a tooltip <br> Tooltips are used to describe or identify an element. In most scenarios, tooltips help the user understand the meaning, function or alt-text of an element.'\" [arrow]=\"arrow\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M10 0C4.5 0 0 4.5 0 10C0 15.5 4.5 20 10 20C15.5 20 20 15.5 20 10C20 4.5 15.5 0 10 0ZM10 18C5.6 18 2 14.4 2 10C2 5.6 5.6 2 10 2C14.4 2 18 5.6 18 10C18 14.4 14.4 18 10 18Z\" fill=\"black\"/>\r\n                <path d=\"M10.1 5.3C9 5.3 8 5.5 7 6.1L7.7 7.5C8.5 7.1 9.3 6.9 9.9 6.9C10.3 6.9 10.6 7 10.8 7.1C11 7.2 11.1 7.5 11.1 7.7C11.1 7.9 11 8.2 10.9 8.4C10.8 8.6 10.5 8.9 10 9.2C9.5 9.5 9.3 9.9 9.2 10.2C9 10.5 9 10.8 9 11.3V12H10V11.4C10 11.1 10.3 10.9 10.4 10.8C10.5 10.7 10.9 10.4 11.3 10.1C11.9 9.7 12.4 9.3 12.6 8.9C12.8 8.5 13 8.1 13 7.6C13 6.9 12.8 6.3 12.2 5.9C11.7 5.5 11 5.3 10.1 5.3Z\" fill=\"black\"/>\r\n                <path d=\"M9.7 12.9C9.3 12.9 9.1 13 8.9 13.2C8.7 13.4 8.6 13.7 8.6 14C8.6 14.4 8.7 14.6 8.9 14.8C9.1 15 9.4 15.1 9.7 15.1C10.1 15.1 10.3 15 10.5 14.8C10.7 14.6 10.8 14.3 10.8 14C10.8 13.7 10.7 13.4 10.5 13.2C10.3 13 10.1 12.9 9.7 12.9Z\" fill=\"black\"/>\r\n            </svg>\r\n        </div>\r\n        <div>\r\n            <svg solTooltip [trigger]=\"trigger\" [position]=\"'right'\" [ariaDescribedBy]=\"'Tooltip right example'\" [interactive]=\"interactive\" [darkMode]=\"darkMode\" [content]=\"'This is a tooltip <br> Tooltips are used to describe or identify an element. In most scenarios, tooltips help the user understand the meaning, function or alt-text of an element.'\" [arrow]=\"arrow\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M10 0C4.5 0 0 4.5 0 10C0 15.5 4.5 20 10 20C15.5 20 20 15.5 20 10C20 4.5 15.5 0 10 0ZM10 18C5.6 18 2 14.4 2 10C2 5.6 5.6 2 10 2C14.4 2 18 5.6 18 10C18 14.4 14.4 18 10 18Z\" fill=\"black\"/>\r\n                <path d=\"M10.1 5.3C9 5.3 8 5.5 7 6.1L7.7 7.5C8.5 7.1 9.3 6.9 9.9 6.9C10.3 6.9 10.6 7 10.8 7.1C11 7.2 11.1 7.5 11.1 7.7C11.1 7.9 11 8.2 10.9 8.4C10.8 8.6 10.5 8.9 10 9.2C9.5 9.5 9.3 9.9 9.2 10.2C9 10.5 9 10.8 9 11.3V12H10V11.4C10 11.1 10.3 10.9 10.4 10.8C10.5 10.7 10.9 10.4 11.3 10.1C11.9 9.7 12.4 9.3 12.6 8.9C12.8 8.5 13 8.1 13 7.6C13 6.9 12.8 6.3 12.2 5.9C11.7 5.5 11 5.3 10.1 5.3Z\" fill=\"black\"/>\r\n                <path d=\"M9.7 12.9C9.3 12.9 9.1 13 8.9 13.2C8.7 13.4 8.6 13.7 8.6 14C8.6 14.4 8.7 14.6 8.9 14.8C9.1 15 9.4 15.1 9.7 15.1C10.1 15.1 10.3 15 10.5 14.8C10.7 14.6 10.8 14.3 10.8 14C10.8 13.7 10.7 13.4 10.5 13.2C10.3 13 10.1 12.9 9.7 12.9Z\" fill=\"black\"/>\r\n            </svg>\r\n        </div>\r\n        <div>\r\n            <svg solTooltip [trigger]=\"trigger\" [position]=\"'right-start'\" [ariaDescribedBy]=\"'Tooltip right start example'\" [interactive]=\"interactive\" [darkMode]=\"darkMode\" [content]=\"'This is a tooltip <br> Tooltips are used to describe or identify an element. In most scenarios, tooltips help the user understand the meaning, function or alt-text of an element.'\" [arrow]=\"arrow\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M10 0C4.5 0 0 4.5 0 10C0 15.5 4.5 20 10 20C15.5 20 20 15.5 20 10C20 4.5 15.5 0 10 0ZM10 18C5.6 18 2 14.4 2 10C2 5.6 5.6 2 10 2C14.4 2 18 5.6 18 10C18 14.4 14.4 18 10 18Z\" fill=\"black\"/>\r\n                <path d=\"M10.1 5.3C9 5.3 8 5.5 7 6.1L7.7 7.5C8.5 7.1 9.3 6.9 9.9 6.9C10.3 6.9 10.6 7 10.8 7.1C11 7.2 11.1 7.5 11.1 7.7C11.1 7.9 11 8.2 10.9 8.4C10.8 8.6 10.5 8.9 10 9.2C9.5 9.5 9.3 9.9 9.2 10.2C9 10.5 9 10.8 9 11.3V12H10V11.4C10 11.1 10.3 10.9 10.4 10.8C10.5 10.7 10.9 10.4 11.3 10.1C11.9 9.7 12.4 9.3 12.6 8.9C12.8 8.5 13 8.1 13 7.6C13 6.9 12.8 6.3 12.2 5.9C11.7 5.5 11 5.3 10.1 5.3Z\" fill=\"black\"/>\r\n                <path d=\"M9.7 12.9C9.3 12.9 9.1 13 8.9 13.2C8.7 13.4 8.6 13.7 8.6 14C8.6 14.4 8.7 14.6 8.9 14.8C9.1 15 9.4 15.1 9.7 15.1C10.1 15.1 10.3 15 10.5 14.8C10.7 14.6 10.8 14.3 10.8 14C10.8 13.7 10.7 13.4 10.5 13.2C10.3 13 10.1 12.9 9.7 12.9Z\" fill=\"black\"/>\r\n            </svg>\r\n        </div>\r\n        <div>\r\n            <svg solTooltip [trigger]=\"trigger\" [position]=\"'right-end'\" [ariaDescribedBy]=\"'Tooltip right end example'\" [interactive]=\"interactive\" [darkMode]=\"darkMode\" [content]=\"'This is a tooltip <br> Tooltips are used to describe or identify an element. In most scenarios, tooltips help the user understand the meaning, function or alt-text of an element.'\" [arrow]=\"arrow\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M10 0C4.5 0 0 4.5 0 10C0 15.5 4.5 20 10 20C15.5 20 20 15.5 20 10C20 4.5 15.5 0 10 0ZM10 18C5.6 18 2 14.4 2 10C2 5.6 5.6 2 10 2C14.4 2 18 5.6 18 10C18 14.4 14.4 18 10 18Z\" fill=\"black\"/>\r\n                <path d=\"M10.1 5.3C9 5.3 8 5.5 7 6.1L7.7 7.5C8.5 7.1 9.3 6.9 9.9 6.9C10.3 6.9 10.6 7 10.8 7.1C11 7.2 11.1 7.5 11.1 7.7C11.1 7.9 11 8.2 10.9 8.4C10.8 8.6 10.5 8.9 10 9.2C9.5 9.5 9.3 9.9 9.2 10.2C9 10.5 9 10.8 9 11.3V12H10V11.4C10 11.1 10.3 10.9 10.4 10.8C10.5 10.7 10.9 10.4 11.3 10.1C11.9 9.7 12.4 9.3 12.6 8.9C12.8 8.5 13 8.1 13 7.6C13 6.9 12.8 6.3 12.2 5.9C11.7 5.5 11 5.3 10.1 5.3Z\" fill=\"black\"/>\r\n                <path d=\"M9.7 12.9C9.3 12.9 9.1 13 8.9 13.2C8.7 13.4 8.6 13.7 8.6 14C8.6 14.4 8.7 14.6 8.9 14.8C9.1 15 9.4 15.1 9.7 15.1C10.1 15.1 10.3 15 10.5 14.8C10.7 14.6 10.8 14.3 10.8 14C10.8 13.7 10.7 13.4 10.5 13.2C10.3 13 10.1 12.9 9.7 12.9Z\" fill=\"black\"/>\r\n            </svg>\r\n        </div>\r\n        <div>\r\n            <svg solTooltip [trigger]=\"trigger\" [position]=\"'left'\" [ariaDescribedBy]=\"'Tooltip left example'\" [interactive]=\"interactive\" [darkMode]=\"darkMode\" [content]=\"'This is a tooltip <br> Tooltips are used to describe or identify an element. In most scenarios, tooltips help the user understand the meaning, function or alt-text of an element.'\" [arrow]=\"arrow\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M10 0C4.5 0 0 4.5 0 10C0 15.5 4.5 20 10 20C15.5 20 20 15.5 20 10C20 4.5 15.5 0 10 0ZM10 18C5.6 18 2 14.4 2 10C2 5.6 5.6 2 10 2C14.4 2 18 5.6 18 10C18 14.4 14.4 18 10 18Z\" fill=\"black\"/>\r\n                <path d=\"M10.1 5.3C9 5.3 8 5.5 7 6.1L7.7 7.5C8.5 7.1 9.3 6.9 9.9 6.9C10.3 6.9 10.6 7 10.8 7.1C11 7.2 11.1 7.5 11.1 7.7C11.1 7.9 11 8.2 10.9 8.4C10.8 8.6 10.5 8.9 10 9.2C9.5 9.5 9.3 9.9 9.2 10.2C9 10.5 9 10.8 9 11.3V12H10V11.4C10 11.1 10.3 10.9 10.4 10.8C10.5 10.7 10.9 10.4 11.3 10.1C11.9 9.7 12.4 9.3 12.6 8.9C12.8 8.5 13 8.1 13 7.6C13 6.9 12.8 6.3 12.2 5.9C11.7 5.5 11 5.3 10.1 5.3Z\" fill=\"black\"/>\r\n                <path d=\"M9.7 12.9C9.3 12.9 9.1 13 8.9 13.2C8.7 13.4 8.6 13.7 8.6 14C8.6 14.4 8.7 14.6 8.9 14.8C9.1 15 9.4 15.1 9.7 15.1C10.1 15.1 10.3 15 10.5 14.8C10.7 14.6 10.8 14.3 10.8 14C10.8 13.7 10.7 13.4 10.5 13.2C10.3 13 10.1 12.9 9.7 12.9Z\" fill=\"black\"/>\r\n            </svg>\r\n        </div>\r\n        <div>\r\n            <svg solTooltip [trigger]=\"trigger\" [position]=\"'left-start'\" [ariaDescribedBy]=\"'Tooltip left start example'\" [interactive]=\"interactive\" [darkMode]=\"darkMode\" [content]=\"'This is a tooltip <br> Tooltips are used to describe or identify an element. In most scenarios, tooltips help the user understand the meaning, function or alt-text of an element.'\" [arrow]=\"arrow\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M10 0C4.5 0 0 4.5 0 10C0 15.5 4.5 20 10 20C15.5 20 20 15.5 20 10C20 4.5 15.5 0 10 0ZM10 18C5.6 18 2 14.4 2 10C2 5.6 5.6 2 10 2C14.4 2 18 5.6 18 10C18 14.4 14.4 18 10 18Z\" fill=\"black\"/>\r\n                <path d=\"M10.1 5.3C9 5.3 8 5.5 7 6.1L7.7 7.5C8.5 7.1 9.3 6.9 9.9 6.9C10.3 6.9 10.6 7 10.8 7.1C11 7.2 11.1 7.5 11.1 7.7C11.1 7.9 11 8.2 10.9 8.4C10.8 8.6 10.5 8.9 10 9.2C9.5 9.5 9.3 9.9 9.2 10.2C9 10.5 9 10.8 9 11.3V12H10V11.4C10 11.1 10.3 10.9 10.4 10.8C10.5 10.7 10.9 10.4 11.3 10.1C11.9 9.7 12.4 9.3 12.6 8.9C12.8 8.5 13 8.1 13 7.6C13 6.9 12.8 6.3 12.2 5.9C11.7 5.5 11 5.3 10.1 5.3Z\" fill=\"black\"/>\r\n                <path d=\"M9.7 12.9C9.3 12.9 9.1 13 8.9 13.2C8.7 13.4 8.6 13.7 8.6 14C8.6 14.4 8.7 14.6 8.9 14.8C9.1 15 9.4 15.1 9.7 15.1C10.1 15.1 10.3 15 10.5 14.8C10.7 14.6 10.8 14.3 10.8 14C10.8 13.7 10.7 13.4 10.5 13.2C10.3 13 10.1 12.9 9.7 12.9Z\" fill=\"black\"/>\r\n            </svg>\r\n        </div>\r\n        <div>\r\n            <svg solTooltip [trigger]=\"trigger\" [position]=\"'left-end'\" [ariaDescribedBy]=\"'Tooltip left end example'\" [interactive]=\"interactive\" [darkMode]=\"darkMode\" [content]=\"'This is a tooltip <br> Tooltips are used to describe or identify an element. In most scenarios, tooltips help the user understand the meaning, function or alt-text of an element.'\" [arrow]=\"arrow\" width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M10 0C4.5 0 0 4.5 0 10C0 15.5 4.5 20 10 20C15.5 20 20 15.5 20 10C20 4.5 15.5 0 10 0ZM10 18C5.6 18 2 14.4 2 10C2 5.6 5.6 2 10 2C14.4 2 18 5.6 18 10C18 14.4 14.4 18 10 18Z\" fill=\"black\"/>\r\n                <path d=\"M10.1 5.3C9 5.3 8 5.5 7 6.1L7.7 7.5C8.5 7.1 9.3 6.9 9.9 6.9C10.3 6.9 10.6 7 10.8 7.1C11 7.2 11.1 7.5 11.1 7.7C11.1 7.9 11 8.2 10.9 8.4C10.8 8.6 10.5 8.9 10 9.2C9.5 9.5 9.3 9.9 9.2 10.2C9 10.5 9 10.8 9 11.3V12H10V11.4C10 11.1 10.3 10.9 10.4 10.8C10.5 10.7 10.9 10.4 11.3 10.1C11.9 9.7 12.4 9.3 12.6 8.9C12.8 8.5 13 8.1 13 7.6C13 6.9 12.8 6.3 12.2 5.9C11.7 5.5 11 5.3 10.1 5.3Z\" fill=\"black\"/>\r\n                <path d=\"M9.7 12.9C9.3 12.9 9.1 13 8.9 13.2C8.7 13.4 8.6 13.7 8.6 14C8.6 14.4 8.7 14.6 8.9 14.8C9.1 15 9.4 15.1 9.7 15.1C10.1 15.1 10.3 15 10.5 14.8C10.7 14.6 10.8 14.3 10.8 14C10.8 13.7 10.7 13.4 10.5 13.2C10.3 13 10.1 12.9 9.7 12.9Z\" fill=\"black\"/>\r\n            </svg>\r\n        </div>\r\n    </div>\r\n    `,\r\n})"
                }
            ],
            "projects/tooltip/src/lib/tooltipBinding.stories.ts": [
                {
                    "name": "ToolTipStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tooltip/src/lib/tooltipBinding.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args: any) => ({\r\n    props: args,\r\n    template: `\r\n        <sol-tooltipWrapper [arrow]=\"arrow\" [darkMode]=\"darkMode\" [trigger]=\"trigger\" [interactive]=\"interactive\"></sol-tooltipWrapper>\r\n    `,\r\n})"
                },
                {
                    "name": "tooltipWithBinding",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tooltip/src/lib/tooltipBinding.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ToolTipStory.bind({})"
                }
            ],
            "projects/tooltip/src/lib/tooltipWithFunction.stories.ts": [
                {
                    "name": "ToolTipStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tooltip/src/lib/tooltipWithFunction.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args: any) => ({\r\n    props: args,\r\n    template: `\r\n        <div style=\"width:100%;height:100px;display:flex; justify-content:center;align-items:center;gap:25px;\">\r\n            <div>\r\n                <lib-button [variant]=\"'primary'\" [size]=\"'large'\" #tooltip1=\"solTooltip\" solTooltip [trigger]=\"trigger\" [position]=\"'bottom'\" [ariaDescribedBy]=\"'Forms tooltip'\" [interactive]=\"interactive\" [darkMode]=\"darkMode\" [closeOnOutsideClick]=\"false\" [content]=\"'This is a tooltip <br> Tooltips are used to describe or identify an element. In most scenarios, tooltips help the user understand the meaning, function or alt-text of an element.'\" [arrow]=\"arrow\">test</lib-button>\r\n            </div>\r\n            <button (click)=\"tooltip1.show()\">show</button>\r\n            <button (click)=\"tooltip1.hide()\">hide</button>\r\n            <button (click)=\"tooltip1.toggle()\">toggle</button>\r\n        </div>\r\n        <div style=\"width:100%;height:100px;display:flex; justify-content:center;align-items:center;gap:25px;\">\r\n            <div>\r\n                <lib-button [variant]=\"'primary'\" [size]=\"'large'\" #tooltip2=\"solTooltip\" solTooltip [trigger]=\"trigger\" [position]=\"'bottom'\" [ariaDescribedBy]=\"'Forms tooltip'\" [interactive]=\"interactive\" [darkMode]=\"darkMode\" [closeOnOutsideClick]=\"false\" [content]=\"'This is a tooltip <br> Tooltips are used to describe or identify an element. In most scenarios, tooltips help the user understand the meaning, function or alt-text of an element.'\" [arrow]=\"arrow\">test</lib-button>\r\n            </div>\r\n            <button (click)=\"tooltip2.show()\">show</button>\r\n            <button (click)=\"tooltip2.hide()\">hide</button>\r\n            <button (click)=\"tooltip2.toggle()\">toggle</button>\r\n        </div>\r\n        <div style=\"width:100%;height:100px;display:flex; justify-content:center;align-items:center;gap:25px;\">\r\n            <div>\r\n                <lib-button [variant]=\"'primary'\" [size]=\"'large'\" #tooltip3=\"solTooltip\" solTooltip [trigger]=\"trigger\" [position]=\"'bottom'\" [ariaDescribedBy]=\"'Forms tooltip'\" [interactive]=\"interactive\" [darkMode]=\"darkMode\" [closeOnOutsideClick]=\"false\" [content]=\"'This is a tooltip <br> Tooltips are used to describe or identify an element. In most scenarios, tooltips help the user understand the meaning, function or alt-text of an element.'\" [arrow]=\"arrow\">test</lib-button>\r\n            </div>\r\n            <button (click)=\"tooltip3.show()\">show</button>\r\n            <button (click)=\"tooltip3.hide()\">hide</button>\r\n            <button (click)=\"tooltip3.toggle()\">toggle</button>\r\n        </div>\r\n    `,\r\n})"
                },
                {
                    "name": "tooltipWithFunction",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/tooltip/src/lib/tooltipWithFunction.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ToolTipStory.bind({})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "projects/button/src/lib/enum/variant.enum.ts": [
                {
                    "name": "Variant",
                    "childs": [
                        {
                            "name": "primary",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "btn-primary"
                        },
                        {
                            "name": "basic",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "btn-basic"
                        },
                        {
                            "name": "text",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "btn-text"
                        },
                        {
                            "name": "warn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "btn-warn"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/button/src/lib/enum/variant.enum.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/accordion/src/lib/accordion.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccordionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/accordion/src/lib/accordion.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AccordionStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/accordion/src/lib/accordion.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Multi",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/accordion/src/lib/accordion.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Single",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/accordion/src/lib/accordionTab.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccordionTabComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/accordion/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/accordion/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/button/src/lib/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/button/src/lib/button.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ButtonService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/button/src/lib/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/button/src/lib/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ButtonStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/button/src/lib/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/button/src/lib/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/button/src/lib/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Text",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/button/src/lib/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Warn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/button/src/lib/buttonDualIcon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ButtonStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/button/src/lib/buttonDualIcon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DualIconBasic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/button/src/lib/buttonDualIcon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DualIconDisabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/button/src/lib/buttonDualIcon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DualIconPrimary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/button/src/lib/buttonDualIcon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DualIconText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/button/src/lib/buttonDualIcon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DualIconWarn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/button/src/lib/buttonLeadingIcon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ButtonStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/button/src/lib/buttonLeadingIcon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LeadingIconBasic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/button/src/lib/buttonLeadingIcon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LeadingIconDisabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/button/src/lib/buttonLeadingIcon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LeadingIconPrimary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/button/src/lib/buttonLeadingIcon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LeadingIconText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/button/src/lib/buttonLeadingIcon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LeadingIconWarn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/button/src/lib/buttonTrailingIcon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ButtonStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/button/src/lib/buttonTrailingIcon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TrailingIconBasic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/button/src/lib/buttonTrailingIcon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TrailingIconDisabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/button/src/lib/buttonTrailingIcon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TrailingIconPrimary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/button/src/lib/buttonTrailingIcon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TrailingIconText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/button/src/lib/buttonTrailingIcon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TrailingIconWarn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/button/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/button/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/modal/src/lib/customBody.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomBodyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/modal/src/lib/customFooter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomFooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/modal/src/lib/customHeader.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/modal/src/lib/modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/modal/src/lib/modal.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ModalService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/modal/src/lib/modal.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertModal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/modal/src/lib/modal.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomModal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/modal/src/lib/modal.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "InformationModal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/modal/src/lib/modal.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "LaunchDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/modal/src/lib/modal.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "WarningModal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/modal/src/lib/modal.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Alert",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/modal/src/lib/modal.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Information",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/modal/src/lib/modal.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Standard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/modal/src/lib/modal.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/modal/src/lib/modal.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Warning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tabs/src/lib/tab.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/tabs/src/lib/tabs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/tabs/src/lib/tabs.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TabsService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/tabs/src/lib/tabs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrimaryExtraLarge",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tabs/src/lib/tabs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrimaryLarge",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tabs/src/lib/tabs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TabStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tabs/src/lib/tabs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextExtraLarge",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tabs/src/lib/tabs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextLarge",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tabs/src/lib/tabsIconOnly.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrimaryExtraLargeIconOnly",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tabs/src/lib/tabsIconOnly.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrimaryLargeIconOnly",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tabs/src/lib/tabsIconOnly.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TabStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tabs/src/lib/tabsIconOnly.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextExtraLargeIconOnly",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tabs/src/lib/tabsIconOnly.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextLargeIconOnly",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tabs/src/lib/tabsIconText.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrimaryExtraLargeIconText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tabs/src/lib/tabsIconText.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PrimaryLargeIconText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tabs/src/lib/tabsIconText.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TabStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tabs/src/lib/tabsIconText.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextExtraLargeIconText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tabs/src/lib/tabsIconText.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextLargeIconText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tabs/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tabs/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tooltip/src/lib/tooltip.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TooltipDirective",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "projects/tooltip/src/lib/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tooltipArrowDark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tooltip/src/lib/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tooltipArrowDarkOnClick",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tooltip/src/lib/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tooltipArrowDarkOnClickInteractive",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tooltip/src/lib/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tooltipArrowLight",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tooltip/src/lib/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tooltipArrowLightOnClick",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tooltip/src/lib/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tooltipDark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tooltip/src/lib/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tooltipDarkInteractive",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tooltip/src/lib/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tooltipDarkOnClick",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tooltip/src/lib/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tooltipLight",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tooltip/src/lib/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tooltipLightOnClick",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tooltip/src/lib/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ToolTipStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tooltip/src/lib/tooltipBinding.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToolTipWrapper",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/tooltip/src/lib/tooltipBinding.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ToolTipStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tooltip/src/lib/tooltipBinding.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tooltipWithBinding",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tooltip/src/lib/tooltipWithFunction.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ToolTipStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/tooltip/src/lib/tooltipWithFunction.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tooltipWithFunction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}